{"ast":null,"code":"var _jsxFileName = \"D:\\\\Team6-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\components\\\\Mail\\\\MailBuckets.js\";\nimport React from 'react';\nimport MailBucket from './MailBucket.style';\nconst buckets = ['Inbox', 'Sent', 'Drafts', 'Trash', 'Important', 'spam', 'Starred'];\n\nfunction getUnread(mails) {\n  const unread = {};\n  mails.forEach(mail => {\n    if (!unread[mail.bucket]) {\n      unread[mail.bucket] = 0;\n    }\n\n    if (!mail.read) {\n      unread[mail.bucket] += 1;\n    }\n  });\n  return unread;\n}\n\nexport default function mailbuckets(mails, filterAction, filterAttr, onDrawerClose) {\n  const unread = getUnread(mails);\n\n  const renderSinglebucket = (bucket, key) => {\n    const onClick = () => {\n      filterAction({\n        bucket\n      });\n\n      if (onDrawerClose) {\n        onDrawerClose();\n      }\n    };\n\n    const selectedBucket = bucket === filterAttr.bucket;\n    const activeClass = selectedBucket ? 'active' : '';\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: `bucket${key}`,\n      onClick: onClick,\n      className: `isoSingleBucket ${activeClass}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, bucket), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"isoMailBadge\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, unread[bucket] ? unread[bucket] : ''));\n  };\n\n  return /*#__PURE__*/React.createElement(MailBucket, {\n    className: \"isoBucketList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, buckets.map((bucket, index) => renderSinglebucket(bucket, index)));\n}\nexport { buckets };","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/shared/isomorphic/components/Mail/MailBuckets.js"],"names":["React","MailBucket","buckets","getUnread","mails","unread","forEach","mail","bucket","read","mailbuckets","filterAction","filterAttr","onDrawerClose","renderSinglebucket","key","onClick","selectedBucket","activeClass","map","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AAEA,MAAMC,OAAO,GAAG,CACd,OADc,EAEd,MAFc,EAGd,QAHc,EAId,OAJc,EAKd,WALc,EAMd,MANc,EAOd,SAPc,CAAhB;;AAUA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAMC,MAAM,GAAG,EAAf;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAcC,IAAI,IAAI;AACpB,QAAI,CAACF,MAAM,CAACE,IAAI,CAACC,MAAN,CAAX,EAA0B;AACxBH,MAAAA,MAAM,CAACE,IAAI,CAACC,MAAN,CAAN,GAAsB,CAAtB;AACD;;AACD,QAAI,CAACD,IAAI,CAACE,IAAV,EAAgB;AACdJ,MAAAA,MAAM,CAACE,IAAI,CAACC,MAAN,CAAN,IAAuB,CAAvB;AACD;AACF,GAPD;AAQA,SAAOH,MAAP;AACD;;AAED,eAAe,SAASK,WAAT,CACbN,KADa,EAEbO,YAFa,EAGbC,UAHa,EAIbC,aAJa,EAKb;AACA,QAAMR,MAAM,GAAGF,SAAS,CAACC,KAAD,CAAxB;;AACA,QAAMU,kBAAkB,GAAG,CAACN,MAAD,EAASO,GAAT,KAAiB;AAC1C,UAAMC,OAAO,GAAG,MAAM;AACpBL,MAAAA,YAAY,CAAC;AAAEH,QAAAA;AAAF,OAAD,CAAZ;;AACA,UAAIK,aAAJ,EAAmB;AACjBA,QAAAA,aAAa;AACd;AACF,KALD;;AAMA,UAAMI,cAAc,GAAGT,MAAM,KAAKI,UAAU,CAACJ,MAA7C;AACA,UAAMU,WAAW,GAAGD,cAAc,GAAG,QAAH,GAAc,EAAhD;AACA,wBACE;AACE,MAAA,GAAG,EAAG,SAAQF,GAAI,EADpB;AAEE,MAAA,OAAO,EAAEC,OAFX;AAGE,MAAA,SAAS,EAAG,mBAAkBE,WAAY,EAH5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOV,MAAP,CALF,eAME;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,MAAM,CAACG,MAAD,CAAN,GAAiBH,MAAM,CAACG,MAAD,CAAvB,GAAkC,EADrC,CANF,CADF;AAYD,GArBD;;AAsBA,sBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,OAAO,CAACiB,GAAR,CAAY,CAACX,MAAD,EAASY,KAAT,KAAmBN,kBAAkB,CAACN,MAAD,EAASY,KAAT,CAAjD,CADH,CADF;AAKD;AACD,SAASlB,OAAT","sourcesContent":["import React from 'react';\r\nimport MailBucket from './MailBucket.style';\r\n\r\nconst buckets = [\r\n  'Inbox',\r\n  'Sent',\r\n  'Drafts',\r\n  'Trash',\r\n  'Important',\r\n  'spam',\r\n  'Starred',\r\n];\r\n\r\nfunction getUnread(mails) {\r\n  const unread = {};\r\n  mails.forEach(mail => {\r\n    if (!unread[mail.bucket]) {\r\n      unread[mail.bucket] = 0;\r\n    }\r\n    if (!mail.read) {\r\n      unread[mail.bucket] += 1;\r\n    }\r\n  });\r\n  return unread;\r\n}\r\n\r\nexport default function mailbuckets(\r\n  mails,\r\n  filterAction,\r\n  filterAttr,\r\n  onDrawerClose\r\n) {\r\n  const unread = getUnread(mails);\r\n  const renderSinglebucket = (bucket, key) => {\r\n    const onClick = () => {\r\n      filterAction({ bucket });\r\n      if (onDrawerClose) {\r\n        onDrawerClose();\r\n      }\r\n    };\r\n    const selectedBucket = bucket === filterAttr.bucket;\r\n    const activeClass = selectedBucket ? 'active' : '';\r\n    return (\r\n      <li\r\n        key={`bucket${key}`}\r\n        onClick={onClick}\r\n        className={`isoSingleBucket ${activeClass}`}\r\n      >\r\n        <span>{bucket}</span>\r\n        <span className=\"isoMailBadge\">\r\n          {unread[bucket] ? unread[bucket] : ''}\r\n        </span>\r\n      </li>\r\n    );\r\n  };\r\n  return (\r\n    <MailBucket className=\"isoBucketList\">\r\n      {buckets.map((bucket, index) => renderSinglebucket(bucket, index))}\r\n    </MailBucket>\r\n  );\r\n}\r\nexport { buckets };\r\n"]},"metadata":{},"sourceType":"module"}