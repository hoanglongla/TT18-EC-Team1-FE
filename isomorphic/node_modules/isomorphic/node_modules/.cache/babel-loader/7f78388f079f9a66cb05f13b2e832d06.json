{"ast":null,"code":"var _jsxFileName = \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\containers\\\\UIElements\\\\Tree\\\\SearchableTree.js\";\nimport React from 'react';\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\nimport { InputSearch } from '@iso/components/uielements/input';\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n  const children = [];\n\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({\n      title: key,\n      key\n    });\n\n    if (i < y) {\n      children.push(key);\n    }\n  }\n\n  if (_level < 0) {\n    return tns;\n  }\n\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\n\ngenerateData(z);\nconst dataList = [];\n\nconst generateList = data => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i];\n    const key = node.key;\n    dataList.push({\n      key,\n      title: key\n    });\n\n    if (node.children) {\n      generateList(node.children, node.key);\n    }\n  }\n};\n\ngenerateList(gData);\n\nconst getParentKey = (key, tree) => {\n  let parentKey;\n\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i];\n\n    if (node.children) {\n      if (node.children.some(item => item.key === key)) {\n        parentKey = node.key;\n      } else if (getParentKey(key, node.children)) {\n        parentKey = getParentKey(key, node.children);\n      }\n    }\n  }\n\n  return parentKey;\n};\n\nexport default function () {\n  const [expandedKeys, setExpandedKeys] = React.useState([]);\n  const [searchValue, setSearchValue] = React.useState('');\n  const [autoExpandParent, setAutoExpandParent] = React.useState(false);\n\n  const onExpand = expandedKeys => {\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n\n  const onChange = e => {\n    const value = e.target.value;\n    const expandedKeys = dataList.map(item => {\n      if (item.key.indexOf(value) > -1) {\n        return getParentKey(item.key, gData);\n      }\n\n      return null;\n    }).filter((item, i, self) => item && self.indexOf(item) === i);\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(true);\n    setSearchValue(value);\n  };\n\n  const loop = data => data.map(item => {\n    const index = item.key.search(searchValue);\n    const beforeStr = item.key.substr(0, index);\n    const afterStr = item.key.substr(index + searchValue.length);\n    const title = index > -1 ? /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, beforeStr, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: '#f50'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, searchValue), afterStr) : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, item.key);\n\n    if (item.children) {\n      return /*#__PURE__*/React.createElement(TreeNode, {\n        key: item.key,\n        title: title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }\n      }, loop(item.children));\n    }\n\n    return /*#__PURE__*/React.createElement(TreeNode, {\n      key: item.key,\n      title: title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }\n    });\n  });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputSearch, {\n    style: {\n      width: 300\n    },\n    placeholder: \"Search\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Tree, {\n    onExpand: onExpand,\n    expandedKeys: expandedKeys,\n    autoExpandParent: autoExpandParent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, loop(gData)));\n}","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/shared/isomorphic/containers/UIElements/Tree/SearchableTree.js"],"names":["React","Tree","TreeNode","InputSearch","x","y","z","gData","generateData","_level","_preKey","_tns","preKey","tns","children","i","key","push","title","level","forEach","index","dataList","generateList","data","length","node","getParentKey","tree","parentKey","some","item","expandedKeys","setExpandedKeys","useState","searchValue","setSearchValue","autoExpandParent","setAutoExpandParent","onExpand","onChange","e","value","target","map","indexOf","filter","self","loop","search","beforeStr","substr","afterStr","color","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\r\nimport { InputSearch } from '@iso/components/uielements/input';\r\n\r\nconst x = 3;\r\nconst y = 2;\r\nconst z = 1;\r\nconst gData = [];\r\n\r\nconst generateData = (_level, _preKey, _tns) => {\r\n  const preKey = _preKey || '0';\r\n  const tns = _tns || gData;\r\n\r\n  const children = [];\r\n  for (let i = 0; i < x; i++) {\r\n    const key = `${preKey}-${i}`;\r\n    tns.push({ title: key, key });\r\n    if (i < y) {\r\n      children.push(key);\r\n    }\r\n  }\r\n  if (_level < 0) {\r\n    return tns;\r\n  }\r\n  const level = _level - 1;\r\n  children.forEach((key, index) => {\r\n    tns[index].children = [];\r\n    return generateData(level, key, tns[index].children);\r\n  });\r\n};\r\ngenerateData(z);\r\n\r\nconst dataList = [];\r\nconst generateList = data => {\r\n  for (let i = 0; i < data.length; i++) {\r\n    const node = data[i];\r\n    const key = node.key;\r\n    dataList.push({ key, title: key });\r\n    if (node.children) {\r\n      generateList(node.children, node.key);\r\n    }\r\n  }\r\n};\r\ngenerateList(gData);\r\n\r\nconst getParentKey = (key, tree) => {\r\n  let parentKey;\r\n  for (let i = 0; i < tree.length; i++) {\r\n    const node = tree[i];\r\n    if (node.children) {\r\n      if (node.children.some(item => item.key === key)) {\r\n        parentKey = node.key;\r\n      } else if (getParentKey(key, node.children)) {\r\n        parentKey = getParentKey(key, node.children);\r\n      }\r\n    }\r\n  }\r\n  return parentKey;\r\n};\r\n\r\nexport default function() {\r\n  const [expandedKeys, setExpandedKeys] = React.useState([]);\r\n  const [searchValue, setSearchValue] = React.useState('');\r\n  const [autoExpandParent, setAutoExpandParent] = React.useState(false);\r\n\r\n  const onExpand = expandedKeys => {\r\n    setExpandedKeys(expandedKeys);\r\n    setAutoExpandParent(false);\r\n  };\r\n  const onChange = e => {\r\n    const value = e.target.value;\r\n    const expandedKeys = dataList\r\n      .map(item => {\r\n        if (item.key.indexOf(value) > -1) {\r\n          return getParentKey(item.key, gData);\r\n        }\r\n        return null;\r\n      })\r\n      .filter((item, i, self) => item && self.indexOf(item) === i);\r\n    setExpandedKeys(expandedKeys);\r\n    setAutoExpandParent(true);\r\n    setSearchValue(value);\r\n  };\r\n  const loop = data =>\r\n    data.map(item => {\r\n      const index = item.key.search(searchValue);\r\n      const beforeStr = item.key.substr(0, index);\r\n      const afterStr = item.key.substr(index + searchValue.length);\r\n      const title =\r\n        index > -1 ? (\r\n          <span>\r\n            {beforeStr}\r\n            <span style={{ color: '#f50' }}>{searchValue}</span>\r\n            {afterStr}\r\n          </span>\r\n        ) : (\r\n          <span>{item.key}</span>\r\n        );\r\n      if (item.children) {\r\n        return (\r\n          <TreeNode key={item.key} title={title}>\r\n            {loop(item.children)}\r\n          </TreeNode>\r\n        );\r\n      }\r\n      return <TreeNode key={item.key} title={title} />;\r\n    });\r\n  return (\r\n    <div>\r\n      <InputSearch\r\n        style={{ width: 300 }}\r\n        placeholder=\"Search\"\r\n        onChange={onChange}\r\n      />\r\n      <Tree\r\n        onExpand={onExpand}\r\n        expandedKeys={expandedKeys}\r\n        autoExpandParent={autoExpandParent}\r\n      >\r\n        {loop(gData)}\r\n      </Tree>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}