{"ast":null,"code":"var _jsxFileName = \"D:\\\\Team6-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\containers\\\\UIElements\\\\Tree\\\\DraggableTree.js\";\nimport React from 'react';\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n  const children = [];\n\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({\n      title: key,\n      key\n    });\n\n    if (i < y) {\n      children.push(key);\n    }\n  }\n\n  if (_level < 0) {\n    return tns;\n  }\n\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\n\ngenerateData(z);\nexport default function () {\n  const [gData, setGData] = React.useState([]);\n  const [expandedKeys, setExpandedKeys] = React.useState(['0-0', '0-0-0', '0-0-0-0']);\n\n  const onDragEnter = info => {};\n\n  const onDrop = info => {\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split('-');\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n\n    const data = [...gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (info.dropToGap) {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i - 1, 0, dragObj);\n      }\n    } else {\n      loop(data, dropKey, item => {\n        item.children = item.children || [];\n        item.children.push(dragObj);\n      });\n    }\n\n    setGData(data);\n  };\n\n  const loop = data => data.map(item => {\n    if (item.children && item.children.length) {\n      return /*#__PURE__*/React.createElement(TreeNode, {\n        key: item.key,\n        title: item.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }, loop(item.children));\n    }\n\n    return /*#__PURE__*/React.createElement(TreeNode, {\n      key: item.key,\n      title: item.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 14\n      }\n    });\n  });\n\n  return /*#__PURE__*/React.createElement(Tree, {\n    className: \"draggable-tree\",\n    defaultExpandedKeys: expandedKeys,\n    draggable: true,\n    onDragEnter: onDragEnter,\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, loop(gData));\n}","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/shared/isomorphic/containers/UIElements/Tree/DraggableTree.js"],"names":["React","Tree","TreeNode","x","y","z","gData","generateData","_level","_preKey","_tns","preKey","tns","children","i","key","push","title","level","forEach","index","setGData","useState","expandedKeys","setExpandedKeys","onDragEnter","info","onDrop","dropKey","node","props","eventKey","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","length","loop","data","callback","item","arr","dragObj","splice","dropToGap","ar","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\r\n\r\nconst x = 3;\r\nconst y = 2;\r\nconst z = 1;\r\nconst gData = [];\r\n\r\nconst generateData = (_level, _preKey, _tns) => {\r\n  const preKey = _preKey || '0';\r\n  const tns = _tns || gData;\r\n\r\n  const children = [];\r\n  for (let i = 0; i < x; i++) {\r\n    const key = `${preKey}-${i}`;\r\n    tns.push({ title: key, key });\r\n    if (i < y) {\r\n      children.push(key);\r\n    }\r\n  }\r\n  if (_level < 0) {\r\n    return tns;\r\n  }\r\n  const level = _level - 1;\r\n  children.forEach((key, index) => {\r\n    tns[index].children = [];\r\n    return generateData(level, key, tns[index].children);\r\n  });\r\n};\r\ngenerateData(z);\r\n\r\nexport default function() {\r\n  const [gData, setGData] = React.useState([]);\r\n  const [expandedKeys, setExpandedKeys] = React.useState([\r\n    '0-0',\r\n    '0-0-0',\r\n    '0-0-0-0',\r\n  ]);\r\n\r\n  const onDragEnter = info => {};\r\n  const onDrop = info => {\r\n    const dropKey = info.node.props.eventKey;\r\n    const dragKey = info.dragNode.props.eventKey;\r\n    const dropPos = info.node.props.pos.split('-');\r\n    const dropPosition =\r\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n    const loop = (data, key, callback) => {\r\n      data.forEach((item, index, arr) => {\r\n        if (item.key === key) {\r\n          return callback(item, index, arr);\r\n        }\r\n        if (item.children) {\r\n          return loop(item.children, key, callback);\r\n        }\r\n      });\r\n    };\r\n    const data = [...gData];\r\n    let dragObj;\r\n    loop(data, dragKey, (item, index, arr) => {\r\n      arr.splice(index, 1);\r\n      dragObj = item;\r\n    });\r\n    if (info.dropToGap) {\r\n      let ar;\r\n      let i;\r\n      loop(data, dropKey, (item, index, arr) => {\r\n        ar = arr;\r\n        i = index;\r\n      });\r\n      if (dropPosition === -1) {\r\n        ar.splice(i, 0, dragObj);\r\n      } else {\r\n        ar.splice(i - 1, 0, dragObj);\r\n      }\r\n    } else {\r\n      loop(data, dropKey, item => {\r\n        item.children = item.children || [];\r\n        item.children.push(dragObj);\r\n      });\r\n    }\r\n    setGData(data);\r\n  };\r\n  const loop = data =>\r\n    data.map(item => {\r\n      if (item.children && item.children.length) {\r\n        return (\r\n          <TreeNode key={item.key} title={item.key}>\r\n            {loop(item.children)}\r\n          </TreeNode>\r\n        );\r\n      }\r\n      return <TreeNode key={item.key} title={item.key} />;\r\n    });\r\n  return (\r\n    <Tree\r\n      className=\"draggable-tree\"\r\n      defaultExpandedKeys={expandedKeys}\r\n      draggable\r\n      onDragEnter={onDragEnter}\r\n      onDrop={onDrop}\r\n    >\r\n      {loop(gData)}\r\n    </Tree>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}