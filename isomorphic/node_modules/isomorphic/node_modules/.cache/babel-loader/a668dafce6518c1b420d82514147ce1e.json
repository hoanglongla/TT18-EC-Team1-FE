{"ast":null,"code":"var _jsxFileName = \"D:\\\\Team6-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\containers\\\\Calendar\\\\Calendar.js\";\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport ModalEvents from './ModalEvents';\nimport notification from '@iso/components/Notification';\nimport calendarActions from '@iso/redux/calendar/actions';\nimport { CalendarStyleWrapper } from './Calendar.styles';\nconst Localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\nconst {\n  changeView,\n  changeEvents\n} = calendarActions;\n\nconst mapToRBCFormat = e => Object.assign({}, e, {\n  start: new Date(e.start),\n  end: new Date(e.end)\n});\n\nconst getIndex = (events, selectedEvent) => events.findIndex(event => event.id === selectedEvent.id);\n\nexport default function DndCalendar() {\n  const {\n    events,\n    view\n  } = useSelector(state => state.Calendar);\n  const dispatch = useDispatch();\n  const [state, setState] = React.useState({\n    view: view,\n    modalVisible: false,\n    selectedData: undefined\n  });\n\n  const onSelectEvent = selectedData => {\n    setState({ ...state,\n      modalVisible: 'update',\n      selectedData\n    });\n  };\n\n  const onSelectSlot = selectedData => {\n    setState({ ...state,\n      modalVisible: 'new',\n      selectedData\n    });\n  };\n\n  const onView = view => {\n    dispatch(changeView(view));\n  };\n\n  const moveEvent = ({\n    event,\n    start,\n    end,\n    isAllDay: droppedOnAllDaySlot\n  }) => {\n    let allDay = event.allDay;\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true;\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false;\n    }\n\n    const updatedEvent = { ...event,\n      start,\n      end,\n      allDay\n    };\n    const idx = getIndex(events, updatedEvent);\n    const nextEvents = [...events];\n    nextEvents.splice(idx, 1, updatedEvent);\n    dispatch(changeEvents(nextEvents));\n    notification('success', 'Move event successfully', `${event.title} was dropped onto ${event.start}`);\n  };\n\n  const resizeEvent = ({\n    event,\n    start,\n    end\n  }) => {\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id === event.id ? { ...existingEvent,\n        start,\n        end\n      } : existingEvent;\n    });\n    dispatch(changeEvents(nextEvents));\n    notification('success', 'Resize event successfully', `${event.title} was resized to ${start}-${end}`);\n  };\n\n  const setModalData = (type, selectedData) => {\n    const newEvents = [...events];\n    const {\n      modalVisible\n    } = state;\n\n    if (type === 'cancel') {\n      setState({ ...state,\n        modalVisible: false,\n        selectedData: undefined\n      });\n    } else if (type === 'delete') {\n      const idx = getIndex(newEvents, selectedData);\n\n      if (idx > -1) {\n        newEvents.splice(idx, 1);\n      }\n\n      dispatch(changeEvents(newEvents));\n      setState({ ...state,\n        modalVisible: false,\n        selectedData: undefined\n      });\n    } else if (type === 'updateValue') {\n      setState({ ...state,\n        selectedData\n      });\n    } else {\n      if (modalVisible === 'new') {\n        newEvents.push(selectedData);\n      } else {\n        const idx = getIndex(newEvents, selectedData);\n\n        if (idx > -1) {\n          newEvents[idx] = selectedData;\n        }\n      }\n\n      dispatch(changeEvents(newEvents));\n      setState({ ...state,\n        modalVisible: false,\n        selectedData: undefined\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(CalendarStyleWrapper, {\n    className: \"isomorphicCalendarWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalEvents, {\n    modalVisible: state.modalVisible,\n    selectedData: state.selectedData,\n    setModalData: setModalData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DragAndDropCalendar, {\n    className: \"isomorphicCalendar\",\n    selectable: true,\n    localizer: Localizer,\n    events: events.map(mapToRBCFormat),\n    onEventDrop: moveEvent,\n    resizable: true,\n    onEventResize: resizeEvent,\n    onSelectEvent: onSelectEvent,\n    onSelectSlot: onSelectSlot,\n    onView: onView,\n    defaultView: \"month\",\n    defaultDate: new Date(),\n    step: 60,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/shared/isomorphic/containers/Calendar/Calendar.js"],"names":["React","useDispatch","useSelector","moment","Calendar","momentLocalizer","withDragAndDrop","ModalEvents","notification","calendarActions","CalendarStyleWrapper","Localizer","DragAndDropCalendar","changeView","changeEvents","mapToRBCFormat","e","Object","assign","start","Date","end","getIndex","events","selectedEvent","findIndex","event","id","DndCalendar","view","state","dispatch","setState","useState","modalVisible","selectedData","undefined","onSelectEvent","onSelectSlot","onView","moveEvent","isAllDay","droppedOnAllDaySlot","allDay","updatedEvent","idx","nextEvents","splice","title","resizeEvent","map","existingEvent","setModalData","type","newEvents","push"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\r\nimport ModalEvents from './ModalEvents';\r\nimport notification from '@iso/components/Notification';\r\nimport calendarActions from '@iso/redux/calendar/actions';\r\n\r\nimport { CalendarStyleWrapper } from './Calendar.styles';\r\n\r\nconst Localizer = momentLocalizer(moment);\r\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\r\nconst { changeView, changeEvents } = calendarActions;\r\n\r\nconst mapToRBCFormat = e =>\r\n  Object.assign({}, e, {\r\n    start: new Date(e.start),\r\n    end: new Date(e.end),\r\n  });\r\n\r\nconst getIndex = (events, selectedEvent) =>\r\n  events.findIndex(event => event.id === selectedEvent.id);\r\n\r\nexport default function DndCalendar() {\r\n  const { events, view } = useSelector(state => state.Calendar);\r\n  const dispatch = useDispatch();\r\n  const [state, setState] = React.useState({\r\n    view: view,\r\n    modalVisible: false,\r\n    selectedData: undefined,\r\n  });\r\n\r\n  const onSelectEvent = selectedData => {\r\n    setState({ ...state, modalVisible: 'update', selectedData });\r\n  };\r\n  const onSelectSlot = selectedData => {\r\n    setState({ ...state, modalVisible: 'new', selectedData });\r\n  };\r\n\r\n  const onView = view => {\r\n    dispatch(changeView(view));\r\n  };\r\n  const moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\r\n    let allDay = event.allDay;\r\n    if (!event.allDay && droppedOnAllDaySlot) {\r\n      allDay = true;\r\n    } else if (event.allDay && !droppedOnAllDaySlot) {\r\n      allDay = false;\r\n    }\r\n\r\n    const updatedEvent = { ...event, start, end, allDay };\r\n    const idx = getIndex(events, updatedEvent);\r\n    const nextEvents = [...events];\r\n    nextEvents.splice(idx, 1, updatedEvent);\r\n    dispatch(changeEvents(nextEvents));\r\n\r\n    notification(\r\n      'success',\r\n      'Move event successfully',\r\n      `${event.title} was dropped onto ${event.start}`\r\n    );\r\n  };\r\n\r\n  const resizeEvent = ({ event, start, end }) => {\r\n    const nextEvents = events.map(existingEvent => {\r\n      return existingEvent.id === event.id\r\n        ? { ...existingEvent, start, end }\r\n        : existingEvent;\r\n    });\r\n\r\n    dispatch(changeEvents(nextEvents));\r\n\r\n    notification(\r\n      'success',\r\n      'Resize event successfully',\r\n      `${event.title} was resized to ${start}-${end}`\r\n    );\r\n  };\r\n\r\n  const setModalData = (type, selectedData) => {\r\n    const newEvents = [...events];\r\n    const { modalVisible } = state;\r\n    if (type === 'cancel') {\r\n      setState({\r\n        ...state,\r\n        modalVisible: false,\r\n        selectedData: undefined,\r\n      });\r\n    } else if (type === 'delete') {\r\n      const idx = getIndex(newEvents, selectedData);\r\n      if (idx > -1) {\r\n        newEvents.splice(idx, 1);\r\n      }\r\n      dispatch(changeEvents(newEvents));\r\n      setState({\r\n        ...state,\r\n        modalVisible: false,\r\n        selectedData: undefined,\r\n      });\r\n    } else if (type === 'updateValue') {\r\n      setState({ ...state, selectedData });\r\n    } else {\r\n      if (modalVisible === 'new') {\r\n        newEvents.push(selectedData);\r\n      } else {\r\n        const idx = getIndex(newEvents, selectedData);\r\n        if (idx > -1) {\r\n          newEvents[idx] = selectedData;\r\n        }\r\n      }\r\n      dispatch(changeEvents(newEvents));\r\n      setState({\r\n        ...state,\r\n        modalVisible: false,\r\n        selectedData: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CalendarStyleWrapper className=\"isomorphicCalendarWrapper\">\r\n      <ModalEvents\r\n        modalVisible={state.modalVisible}\r\n        selectedData={state.selectedData}\r\n        setModalData={setModalData}\r\n      />\r\n      <DragAndDropCalendar\r\n        className=\"isomorphicCalendar\"\r\n        selectable\r\n        localizer={Localizer}\r\n        events={events.map(mapToRBCFormat)}\r\n        onEventDrop={moveEvent}\r\n        resizable\r\n        onEventResize={resizeEvent}\r\n        onSelectEvent={onSelectEvent}\r\n        onSelectSlot={onSelectSlot}\r\n        onView={onView}\r\n        defaultView=\"month\"\r\n        defaultDate={new Date()}\r\n        step={60}\r\n      />\r\n    </CalendarStyleWrapper>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}