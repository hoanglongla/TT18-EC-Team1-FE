{"ast":null,"code":"'use strict';\n\nvar forEach = require('lodash/forEach');\n\nvar map = require('lodash/map');\n\nvar reduce = require('lodash/reduce');\n\nvar merge = require('lodash/merge');\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = []; // One query for the hits\n\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    }); // One for each disjunctive facets\n\n    forEach(state.getRefinedDisjunctiveFacets(), function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    }); // maybe more to get the root level of hierarchical facets when activated\n\n    forEach(state.getRefinedHierarchicalFacets(), function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet); // if we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get the root values\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        queries.push({\n          indexName: index,\n          params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet, true)\n        });\n      }\n    });\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets.concat(state.disjunctiveFacets).concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n\n    var numericFilters = requestBuilder._getNumericFilters(state);\n\n    var tagFilters = requestBuilder._getTagFilters(state);\n\n    var additionalParams = {\n      facets: facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return merge(state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n\n    var tagFilters = requestBuilder._getTagFilters(state);\n\n    var additionalParams = {\n      hitsPerPage: 1,\n      page: 0,\n      attributesToRetrieve: [],\n      attributesToHighlight: [],\n      attributesToSnippet: [],\n      tagFilters: tagFilters,\n      analytics: false,\n      clickAnalytics: false\n    };\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(state, hierarchicalFacet, hierarchicalRootLevel);\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return merge(state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n    forEach(state.numericRefinements, function (operators, attribute) {\n      forEach(operators, function (values, operator) {\n        if (facetName !== attribute) {\n          forEach(values, function (value) {\n            if (Array.isArray(value)) {\n              var vs = map(value, function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n    forEach(state.facetsRefinements, function (facetValues, facetName) {\n      forEach(facetValues, function (facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n    forEach(state.facetsExcludes, function (facetValues, facetName) {\n      forEach(facetValues, function (facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n    forEach(state.disjunctiveFacetsRefinements, function (facetValues, facetName) {\n      if (facetName === facet || !facetValues || facetValues.length === 0) return;\n      var orFilters = [];\n      forEach(facetValues, function (facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n      facetFilters.push(orFilters);\n    });\n    forEach(state.hierarchicalFacetsRefinements, function (facetValues, facetName) {\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n\n      var attributeToRefine;\n      var attributesIndex; // we ask for parent facet values only when the `facet` is the current hierarchical facet\n\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || !rootPath && hierarchicalRootLevel === true || rootPath && rootPath.split(separator).length === facetValue.split(separator).length) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n    return facetFilters;\n  },\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n    return reduce(state.hierarchicalFacets, // ask for as much levels as there's hierarchical refinements\n    function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n      var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0]; // if no refinement, ask for root level\n\n      if (!hierarchicalRefinement) {\n        allAttributes.push(hierarchicalFacet.attributes[0]);\n        return allAttributes;\n      }\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      var level = hierarchicalRefinement.split(separator).length;\n      var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n      return allAttributes.concat(newAttributes);\n    }, out);\n  },\n  _getDisjunctiveHierarchicalFacetAttribute: function (state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || ''; // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ? state.clearRefinements(facetName) : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n\n    var queries = merge(requestBuilder._getHitsSearchParams(stateForSearchForFacetValues), searchForFacetSearchParameters);\n    return queries;\n  }\n};\nmodule.exports = requestBuilder;","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/algoliasearch-helper/src/requestBuilder.js"],"names":["forEach","require","map","reduce","merge","requestBuilder","_getQueries","getQueries","index","state","queries","push","indexName","params","_getHitsSearchParams","getRefinedDisjunctiveFacets","refinedFacet","_getDisjunctiveFacetSearchParams","getRefinedHierarchicalFacets","hierarchicalFacet","getHierarchicalFacetByName","currentRefinement","getHierarchicalRefinement","separator","_getHierarchicalFacetSeparator","length","split","facets","concat","disjunctiveFacets","_getHitsHierarchicalFacetsAttributes","facetFilters","_getFacetFilters","numericFilters","_getNumericFilters","tagFilters","_getTagFilters","additionalParams","getQueryParams","facet","hierarchicalRootLevel","hitsPerPage","page","attributesToRetrieve","attributesToHighlight","attributesToSnippet","analytics","clickAnalytics","_getDisjunctiveHierarchicalFacetAttribute","facetName","numericRefinements","operators","attribute","values","operator","value","Array","isArray","vs","v","tagRefinements","join","facetsRefinements","facetValues","facetValue","facetsExcludes","disjunctiveFacetsRefinements","orFilters","hierarchicalFacetsRefinements","undefined","rootPath","_getHierarchicalRootPath","attributeToRefine","attributesIndex","indexOf","slice","lastIndexOf","attributes","out","hierarchicalFacets","getHitsAttributesForHierarchicalFacet","allAttributes","hierarchicalRefinement","name","level","newAttributes","rootLevel","attributeIndex","parentLevel","getSearchForFacetQuery","query","maxFacetHits","stateForSearchForFacetValues","isDisjunctiveFacet","clearRefinements","searchForFacetSearchParameters","facetQuery","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar forEach = require('lodash/forEach');\nvar map = require('lodash/map');\nvar reduce = require('lodash/reduce');\nvar merge = require('lodash/merge');\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    forEach(state.getRefinedDisjunctiveFacets(), function(refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // maybe more to get the root level of hierarchical facets when activated\n    forEach(state.getRefinedHierarchicalFacets(), function(refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      // if we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get the root values\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        queries.push({\n          indexName: index,\n          params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet, true)\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function(state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      facets: facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return merge(state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 1,\n      page: 0,\n      attributesToRetrieve: [],\n      attributesToHighlight: [],\n      attributesToSnippet: [],\n      tagFilters: tagFilters,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n        state,\n        hierarchicalFacet,\n        hierarchicalRootLevel\n      );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return merge(state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function(state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    forEach(state.numericRefinements, function(operators, attribute) {\n      forEach(operators, function(values, operator) {\n        if (facetName !== attribute) {\n          forEach(values, function(value) {\n            if (Array.isArray(value)) {\n              var vs = map(value, function(v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function(state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    forEach(state.facetsRefinements, function(facetValues, facetName) {\n      forEach(facetValues, function(facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n\n    forEach(state.facetsExcludes, function(facetValues, facetName) {\n      forEach(facetValues, function(facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n\n    forEach(state.disjunctiveFacetsRefinements, function(facetValues, facetName) {\n      if (facetName === facet || !facetValues || facetValues.length === 0) return;\n      var orFilters = [];\n\n      forEach(facetValues, function(facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n\n      facetFilters.push(orFilters);\n    });\n\n    forEach(state.hierarchicalFacetsRefinements, function(facetValues, facetName) {\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || (!rootPath && hierarchicalRootLevel === true) ||\n          (rootPath && rootPath.split(separator).length === facetValue.split(separator).length)) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function(state) {\n    var out = [];\n\n    return reduce(\n      state.hierarchicalFacets,\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      }, out);\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ?\n      state.clearRefinements(facetName) :\n      state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    var queries = merge(requestBuilder._getHitsSearchParams(stateForSearchForFacetValues), searchForFacetSearchParameters);\n    return queries;\n  }\n};\n\nmodule.exports = requestBuilder;\n"]},"metadata":{},"sourceType":"script"}