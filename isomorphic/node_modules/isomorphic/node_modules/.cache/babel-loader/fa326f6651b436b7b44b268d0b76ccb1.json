{"ast":null,"code":"import \"antd/es/icon/style/css\";\nimport _Icon from \"antd/es/icon\";\nvar _jsxFileName = \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\containers\\\\ScrumBoard\\\\Board\\\\Board.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Column from '../Column/Column';\nimport { reorder, reorderTasks } from '@iso/lib/helpers/reorder';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport { ParentContainer, Container, AddListButton } from './Board.style';\nimport { filterSearchedComponents } from '@iso/lib/helpers/searchTaskCard';\nimport BoardLayout from './BoardLayout/BoardLayout';\nimport modalActions from '@iso/redux/modal/actions';\n\nfunction Board({\n  currentBoard,\n  openModal,\n  boards,\n  match,\n  columns,\n  moveColumnWatcher,\n  tasks,\n  moveTaskWatcher,\n  ordered,\n  containerHeight,\n  withScrollableColumns = true,\n  boardRenderWatcher\n}) {\n  useEffect(() => {\n    boardRenderWatcher(match.params.id);\n  }, [boardRenderWatcher, match.params.id]);\n\n  const onDragEnd = ({\n    source,\n    destination,\n    type,\n    draggableId\n  }) => {\n    // source= {\n    //   droppableId: 'column-1',\n    //   index: 0\n    // }\n    // destination= {\n    //   droppableId: 'column-1',\n    //   index: 1\n    // }\n    // type= \"TYPE\"\n    // draggableId: 'task-1'\n    // dropped nowhere\n    if (!destination) return; // did not move anywhere - can bail early\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    } // reordering column\n\n\n    if (type === 'COLUMN') {\n      const columnOrdered = reorder(ordered, source.index, destination.index);\n      moveColumnWatcher({\n        board_id: match.params.id,\n        column_orders: columnOrdered\n      });\n      return;\n    }\n\n    const updatedColumns = reorderTasks({\n      columns,\n      source,\n      destination,\n      draggableId\n    });\n    const draggedTask = tasks[draggableId];\n    const updatedTask = { ...draggedTask,\n      column_id: destination.droppableId\n    };\n    const updatedTasks = { ...tasks,\n      [updatedTask.id]: updatedTask\n    };\n    moveTaskWatcher({\n      columns: updatedColumns,\n      tasks: updatedTasks\n    });\n  };\n\n  const board = /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"board\",\n    type: \"COLUMN\",\n    direction: \"horizontal\",\n    ignoreContainerClipping: Boolean(containerHeight),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, provided => /*#__PURE__*/React.createElement(Container, Object.assign({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), ordered && ordered.map((columnId, index) => {\n    const column = columns[columnId];\n    const tasksWithinColumn = column.task_orders.map(task_id => tasks[task_id]);\n    return /*#__PURE__*/React.createElement(Column, {\n      key: columnId,\n      index: index,\n      title: column.title,\n      column: column,\n      boardId: match.params.id,\n      tasks: tasksWithinColumn,\n      isScrollable: withScrollableColumns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    });\n  }), /*#__PURE__*/React.createElement(AddListButton, {\n    onClick: () => openModal({\n      modalType: 'CREATE_COLUMN',\n      modalProps: {\n        boardId: match.params.id\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(_Icon, {\n    type: \"plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), \" Add another list\")));\n  return /*#__PURE__*/React.createElement(BoardLayout, {\n    currentBoard: currentBoard,\n    boards: boards,\n    match: match,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, containerHeight ? /*#__PURE__*/React.createElement(ParentContainer, {\n    height: containerHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, board) : board));\n}\n\nexport default connect((state, ownProps) => {\n  return {\n    ordered: state.scrumBoard.boards && state.scrumBoard.boards[ownProps.match.params.id] && state.scrumBoard.boards[ownProps.match.params.id].column_orders,\n    state: state.scrumBoard,\n    boards: state.scrumBoard.boards,\n    currentBoard: state.scrumBoard.boards[ownProps.match.params.id],\n    columns: filterSearchedComponents(state.scrumBoard.tasks, state.scrumBoard.columns, state.scrumBoard.searchText),\n    tasks: state.scrumBoard.tasks\n  };\n}, { ...scrumBoardActions,\n  ...modalActions\n})(Board);","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/shared/isomorphic/containers/ScrumBoard/Board/Board.js"],"names":["React","useEffect","connect","Column","reorder","reorderTasks","DragDropContext","Droppable","scrumBoardActions","ParentContainer","Container","AddListButton","filterSearchedComponents","BoardLayout","modalActions","Board","currentBoard","openModal","boards","match","columns","moveColumnWatcher","tasks","moveTaskWatcher","ordered","containerHeight","withScrollableColumns","boardRenderWatcher","params","id","onDragEnd","source","destination","type","draggableId","droppableId","index","columnOrdered","board_id","column_orders","updatedColumns","draggedTask","updatedTask","column_id","updatedTasks","board","Boolean","provided","innerRef","droppableProps","map","columnId","column","tasksWithinColumn","task_orders","task_id","title","modalType","modalProps","boardId","state","ownProps","scrumBoard","searchText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,0BAAtC;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,qBAA3C;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,eAA1D;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,SAASC,KAAT,CAAe;AACbC,EAAAA,YADa;AAEbC,EAAAA,SAFa;AAGbC,EAAAA,MAHa;AAIbC,EAAAA,KAJa;AAKbC,EAAAA,OALa;AAMbC,EAAAA,iBANa;AAObC,EAAAA,KAPa;AAQbC,EAAAA,eARa;AASbC,EAAAA,OATa;AAUbC,EAAAA,eAVa;AAWbC,EAAAA,qBAAqB,GAAG,IAXX;AAYbC,EAAAA;AAZa,CAAf,EAaG;AACD1B,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,kBAAkB,CAACR,KAAK,CAACS,MAAN,CAAaC,EAAd,CAAlB;AACD,GAFQ,EAEN,CAACF,kBAAD,EAAqBR,KAAK,CAACS,MAAN,CAAaC,EAAlC,CAFM,CAAT;;AAGA,QAAMC,SAAS,GAAG,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,WAAV;AAAuBC,IAAAA,IAAvB;AAA6BC,IAAAA;AAA7B,GAAD,KAAgD;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,QAAI,CAACF,WAAL,EAAkB,OAb8C,CAchE;;AACA,QACED,MAAM,CAACI,WAAP,KAAuBH,WAAW,CAACG,WAAnC,IACAJ,MAAM,CAACK,KAAP,KAAiBJ,WAAW,CAACI,KAF/B,EAGE;AACA;AACD,KApB+D,CAsBhE;;;AACA,QAAIH,IAAI,KAAK,QAAb,EAAuB;AACrB,YAAMI,aAAa,GAAGjC,OAAO,CAACoB,OAAD,EAAUO,MAAM,CAACK,KAAjB,EAAwBJ,WAAW,CAACI,KAApC,CAA7B;AACAf,MAAAA,iBAAiB,CAAC;AAChBiB,QAAAA,QAAQ,EAAEnB,KAAK,CAACS,MAAN,CAAaC,EADP;AAEhBU,QAAAA,aAAa,EAAEF;AAFC,OAAD,CAAjB;AAIA;AACD;;AAED,UAAMG,cAAc,GAAGnC,YAAY,CAAC;AAClCe,MAAAA,OADkC;AAElCW,MAAAA,MAFkC;AAGlCC,MAAAA,WAHkC;AAIlCE,MAAAA;AAJkC,KAAD,CAAnC;AAMA,UAAMO,WAAW,GAAGnB,KAAK,CAACY,WAAD,CAAzB;AACA,UAAMQ,WAAW,GAAG,EAClB,GAAGD,WADe;AAElBE,MAAAA,SAAS,EAAEX,WAAW,CAACG;AAFL,KAApB;AAIA,UAAMS,YAAY,GAAG,EACnB,GAAGtB,KADgB;AAEnB,OAACoB,WAAW,CAACb,EAAb,GAAkBa;AAFC,KAArB;AAIAnB,IAAAA,eAAe,CAAC;AAAEH,MAAAA,OAAO,EAAEoB,cAAX;AAA2BlB,MAAAA,KAAK,EAAEsB;AAAlC,KAAD,CAAf;AACD,GAhDD;;AAkDA,QAAMC,KAAK,gBACT,oBAAC,SAAD;AACE,IAAA,WAAW,EAAC,OADd;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,SAAS,EAAC,YAHZ;AAIE,IAAA,uBAAuB,EAAEC,OAAO,CAACrB,eAAD,CAJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGsB,QAAQ,iBACP,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAEA,QAAQ,CAACC;AAAzB,KAAuCD,QAAQ,CAACE,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGzB,OAAO,IACNA,OAAO,CAAC0B,GAAR,CAAY,CAACC,QAAD,EAAWf,KAAX,KAAqB;AAC/B,UAAMgB,MAAM,GAAGhC,OAAO,CAAC+B,QAAD,CAAtB;AACA,UAAME,iBAAiB,GAAGD,MAAM,CAACE,WAAP,CAAmBJ,GAAnB,CACxBK,OAAO,IAAIjC,KAAK,CAACiC,OAAD,CADQ,CAA1B;AAIA,wBACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEJ,QADP;AAEE,MAAA,KAAK,EAAEf,KAFT;AAGE,MAAA,KAAK,EAAEgB,MAAM,CAACI,KAHhB;AAIE,MAAA,MAAM,EAAEJ,MAJV;AAKE,MAAA,OAAO,EAAEjC,KAAK,CAACS,MAAN,CAAaC,EALxB;AAME,MAAA,KAAK,EAAEwB,iBANT;AAOE,MAAA,YAAY,EAAE3B,qBAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAjBD,CAFJ,eAoBE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAE,MACPT,SAAS,CAAC;AACRwC,MAAAA,SAAS,EAAE,eADH;AAERC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,OAAO,EAAExC,KAAK,CAACS,MAAN,CAAaC;AAAxB;AAFJ,KAAD,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE;AAAM,IAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,sBApBF,CAPJ,CADF;AA2CA,sBACE,oBAAC,WAAD;AAAa,IAAA,YAAY,EAAEb,YAA3B;AAAyC,IAAA,MAAM,EAAEE,MAAjD;AAAyD,IAAA,KAAK,EAAEC,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEW,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,eAAe,gBACd,oBAAC,eAAD;AAAiB,IAAA,MAAM,EAAEA,eAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2CoB,KAA3C,CADc,GAGdA,KAJJ,CADF,CADF;AAWD;;AAED,eAAe3C,OAAO,CACpB,CAAC0D,KAAD,EAAQC,QAAR,KAAqB;AACnB,SAAO;AACLrC,IAAAA,OAAO,EACLoC,KAAK,CAACE,UAAN,CAAiB5C,MAAjB,IACA0C,KAAK,CAACE,UAAN,CAAiB5C,MAAjB,CAAwB2C,QAAQ,CAAC1C,KAAT,CAAeS,MAAf,CAAsBC,EAA9C,CADA,IAEA+B,KAAK,CAACE,UAAN,CAAiB5C,MAAjB,CAAwB2C,QAAQ,CAAC1C,KAAT,CAAeS,MAAf,CAAsBC,EAA9C,EAAkDU,aAJ/C;AAKLqB,IAAAA,KAAK,EAAEA,KAAK,CAACE,UALR;AAML5C,IAAAA,MAAM,EAAE0C,KAAK,CAACE,UAAN,CAAiB5C,MANpB;AAOLF,IAAAA,YAAY,EAAE4C,KAAK,CAACE,UAAN,CAAiB5C,MAAjB,CAAwB2C,QAAQ,CAAC1C,KAAT,CAAeS,MAAf,CAAsBC,EAA9C,CAPT;AAQLT,IAAAA,OAAO,EAAER,wBAAwB,CAC/BgD,KAAK,CAACE,UAAN,CAAiBxC,KADc,EAE/BsC,KAAK,CAACE,UAAN,CAAiB1C,OAFc,EAG/BwC,KAAK,CAACE,UAAN,CAAiBC,UAHc,CAR5B;AAaLzC,IAAAA,KAAK,EAAEsC,KAAK,CAACE,UAAN,CAAiBxC;AAbnB,GAAP;AAeD,CAjBmB,EAkBpB,EAAE,GAAGd,iBAAL;AAAwB,KAAGM;AAA3B,CAlBoB,CAAP,CAmBbC,KAnBa,CAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Icon } from 'antd';\r\nimport Column from '../Column/Column';\r\nimport { reorder, reorderTasks } from '@iso/lib/helpers/reorder';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\r\nimport { ParentContainer, Container, AddListButton } from './Board.style';\r\nimport { filterSearchedComponents } from '@iso/lib/helpers/searchTaskCard';\r\nimport BoardLayout from './BoardLayout/BoardLayout';\r\nimport modalActions from '@iso/redux/modal/actions';\r\n\r\nfunction Board({\r\n  currentBoard,\r\n  openModal,\r\n  boards,\r\n  match,\r\n  columns,\r\n  moveColumnWatcher,\r\n  tasks,\r\n  moveTaskWatcher,\r\n  ordered,\r\n  containerHeight,\r\n  withScrollableColumns = true,\r\n  boardRenderWatcher,\r\n}) {\r\n  useEffect(() => {\r\n    boardRenderWatcher(match.params.id);\r\n  }, [boardRenderWatcher, match.params.id]);\r\n  const onDragEnd = ({ source, destination, type, draggableId }) => {\r\n    // source= {\r\n    //   droppableId: 'column-1',\r\n    //   index: 0\r\n    // }\r\n    // destination= {\r\n    //   droppableId: 'column-1',\r\n    //   index: 1\r\n    // }\r\n    // type= \"TYPE\"\r\n    // draggableId: 'task-1'\r\n\r\n    // dropped nowhere\r\n    if (!destination) return;\r\n    // did not move anywhere - can bail early\r\n    if (\r\n      source.droppableId === destination.droppableId &&\r\n      source.index === destination.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // reordering column\r\n    if (type === 'COLUMN') {\r\n      const columnOrdered = reorder(ordered, source.index, destination.index);\r\n      moveColumnWatcher({\r\n        board_id: match.params.id,\r\n        column_orders: columnOrdered,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const updatedColumns = reorderTasks({\r\n      columns,\r\n      source,\r\n      destination,\r\n      draggableId,\r\n    });\r\n    const draggedTask = tasks[draggableId];\r\n    const updatedTask = {\r\n      ...draggedTask,\r\n      column_id: destination.droppableId,\r\n    };\r\n    const updatedTasks = {\r\n      ...tasks,\r\n      [updatedTask.id]: updatedTask,\r\n    };\r\n    moveTaskWatcher({ columns: updatedColumns, tasks: updatedTasks });\r\n  };\r\n\r\n  const board = (\r\n    <Droppable\r\n      droppableId=\"board\"\r\n      type=\"COLUMN\"\r\n      direction=\"horizontal\"\r\n      ignoreContainerClipping={Boolean(containerHeight)}\r\n    >\r\n      {provided => (\r\n        <Container ref={provided.innerRef} {...provided.droppableProps}>\r\n          {ordered &&\r\n            ordered.map((columnId, index) => {\r\n              const column = columns[columnId];\r\n              const tasksWithinColumn = column.task_orders.map(\r\n                task_id => tasks[task_id]\r\n              );\r\n\r\n              return (\r\n                <Column\r\n                  key={columnId}\r\n                  index={index}\r\n                  title={column.title}\r\n                  column={column}\r\n                  boardId={match.params.id}\r\n                  tasks={tasksWithinColumn}\r\n                  isScrollable={withScrollableColumns}\r\n                />\r\n              );\r\n            })}\r\n          <AddListButton\r\n            onClick={() =>\r\n              openModal({\r\n                modalType: 'CREATE_COLUMN',\r\n                modalProps: { boardId: match.params.id },\r\n              })\r\n            }\r\n          >\r\n            <Icon type=\"plus\" /> Add another list\r\n          </AddListButton>\r\n        </Container>\r\n      )}\r\n    </Droppable>\r\n  );\r\n\r\n  return (\r\n    <BoardLayout currentBoard={currentBoard} boards={boards} match={match}>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        {containerHeight ? (\r\n          <ParentContainer height={containerHeight}>{board}</ParentContainer>\r\n        ) : (\r\n          board\r\n        )}\r\n      </DragDropContext>\r\n    </BoardLayout>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  (state, ownProps) => {\r\n    return {\r\n      ordered:\r\n        state.scrumBoard.boards &&\r\n        state.scrumBoard.boards[ownProps.match.params.id] &&\r\n        state.scrumBoard.boards[ownProps.match.params.id].column_orders,\r\n      state: state.scrumBoard,\r\n      boards: state.scrumBoard.boards,\r\n      currentBoard: state.scrumBoard.boards[ownProps.match.params.id],\r\n      columns: filterSearchedComponents(\r\n        state.scrumBoard.tasks,\r\n        state.scrumBoard.columns,\r\n        state.scrumBoard.searchText\r\n      ),\r\n      tasks: state.scrumBoard.tasks,\r\n    };\r\n  },\r\n  { ...scrumBoardActions, ...modalActions }\r\n)(Board);\r\n"]},"metadata":{},"sourceType":"module"}