{"ast":null,"code":"module.exports = function dataURItoBlob(dataURI, opts, toFile) {\n  // get the base64 data\n  var data = dataURI.split(',')[1]; // user may provide mime type, if not get it from data URI\n\n  var mimeType = opts.mimeType || dataURI.split(',')[0].split(':')[1].split(';')[0]; // default to plain/text if data URI has no mimeType\n\n  if (mimeType == null) {\n    mimeType = 'plain/text';\n  }\n\n  var binary = atob(data);\n  var array = [];\n\n  for (var i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n\n  var bytes;\n\n  try {\n    bytes = new Uint8Array(array); // eslint-disable-line compat/compat\n  } catch (err) {\n    return null;\n  } // Convert to a File?\n\n\n  if (toFile) {\n    return new File([bytes], opts.name || '', {\n      type: mimeType\n    });\n  }\n\n  return new Blob([bytes], {\n    type: mimeType\n  });\n};","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/@uppy/utils/lib/dataURItoBlob.js"],"names":["module","exports","dataURItoBlob","dataURI","opts","toFile","data","split","mimeType","binary","atob","array","i","length","push","charCodeAt","bytes","Uint8Array","err","File","name","type","Blob"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8C;AAC7D;AACA,MAAIC,IAAI,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAX,CAF6D,CAE3B;;AAElC,MAAIC,QAAQ,GAAGJ,IAAI,CAACI,QAAL,IAAiBL,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBA,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAhC,CAJ6D,CAIsB;;AAEnF,MAAIC,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,IAAAA,QAAQ,GAAG,YAAX;AACD;;AAED,MAAIC,MAAM,GAAGC,IAAI,CAACJ,IAAD,CAAjB;AACA,MAAIK,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCD,IAAAA,KAAK,CAACG,IAAN,CAAWL,MAAM,CAACM,UAAP,CAAkBH,CAAlB,CAAX;AACD;;AAED,MAAII,KAAJ;;AAEA,MAAI;AACFA,IAAAA,KAAK,GAAG,IAAIC,UAAJ,CAAeN,KAAf,CAAR,CADE,CAC6B;AAChC,GAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,WAAO,IAAP;AACD,GAvB4D,CAuB3D;;;AAGF,MAAIb,MAAJ,EAAY;AACV,WAAO,IAAIc,IAAJ,CAAS,CAACH,KAAD,CAAT,EAAkBZ,IAAI,CAACgB,IAAL,IAAa,EAA/B,EAAmC;AACxCC,MAAAA,IAAI,EAAEb;AADkC,KAAnC,CAAP;AAGD;;AAED,SAAO,IAAIc,IAAJ,CAAS,CAACN,KAAD,CAAT,EAAkB;AACvBK,IAAAA,IAAI,EAAEb;AADiB,GAAlB,CAAP;AAGD,CAnCD","sourcesContent":["module.exports = function dataURItoBlob(dataURI, opts, toFile) {\n  // get the base64 data\n  var data = dataURI.split(',')[1]; // user may provide mime type, if not get it from data URI\n\n  var mimeType = opts.mimeType || dataURI.split(',')[0].split(':')[1].split(';')[0]; // default to plain/text if data URI has no mimeType\n\n  if (mimeType == null) {\n    mimeType = 'plain/text';\n  }\n\n  var binary = atob(data);\n  var array = [];\n\n  for (var i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n\n  var bytes;\n\n  try {\n    bytes = new Uint8Array(array); // eslint-disable-line compat/compat\n  } catch (err) {\n    return null;\n  } // Convert to a File?\n\n\n  if (toFile) {\n    return new File([bytes], opts.name || '', {\n      type: mimeType\n    });\n  }\n\n  return new Blob([bytes], {\n    type: mimeType\n  });\n};"]},"metadata":{},"sourceType":"script"}