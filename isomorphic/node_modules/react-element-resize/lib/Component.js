"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactElementResize = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var iframeStyle = {
  display: 'block',
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  overflow: 'hidden',
  border: 'none',
  background: 'transparent',
  pointerEvents: 'none',
  zIndex: -1
};

var ReactElementResize =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ReactElementResize, _React$Component);

  function ReactElementResize(props) {
    var _this;

    _classCallCheck(this, ReactElementResize);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactElementResize).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      width: -1,
      height: -1,
      offsetLeft: -1,
      offsetTop: -1,
      scrollLeft: -1,
      scrollTop: -1
    });

    _defineProperty(_assertThisInitialized(_this), "onContainerRef", function (ref) {
      _this.container = ref;
    });

    _defineProperty(_assertThisInitialized(_this), "onResize", function () {
      var _this$sensor$contentW = _this.sensor.contentWindow,
          width = _this$sensor$contentW.innerWidth,
          height = _this$sensor$contentW.innerHeight;
      var onResize = _this.props.onResize;
      onResize({
        width: width,
        height: height
      });

      _this.setState({
        width: width,
        height: height
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onScroll", function () {
      var _this$container = _this.container,
          offsetLeft = _this$container.offsetLeft,
          offsetTop = _this$container.offsetTop,
          scrollLeft = _this$container.scrollLeft,
          scrollTop = _this$container.scrollTop;
      var onScroll = _this.props.onScroll;
      onScroll({
        offsetLeft: offsetLeft,
        offsetTop: offsetTop,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });

      _this.setState({
        offsetLeft: offsetLeft,
        offsetTop: offsetTop,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onSensorRef", function (ref) {
      _this.sensor = ref;
    });

    var debounceTimeout = props.debounceTimeout,
        debounceOptions = props.debounceOptions,
        _onResize = props.onResize,
        _onScroll = props.onScroll;

    if (_onResize) {
      _this.onResizeDebounced = debounceTimeout > -1 ? (0, _lodash["default"])(_this.onResize, debounceTimeout, debounceOptions) : _this.onResize;
    }

    if (_onScroll) {
      _this.onScrollDebounced = debounceTimeout > -1 ? (0, _lodash["default"])(_this.onScroll, debounceTimeout, debounceOptions) : _this.onScroll;
    }

    return _this;
  }

  _createClass(ReactElementResize, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          onResize = _this$props.onResize,
          onScroll = _this$props.onScroll;

      if (onResize) {
        this.sensor.contentWindow.addEventListener('resize', this.onResizeDebounced, false);
        this.rafOnResize = window.requestAnimationFrame(this.onResize);
      }

      if (onScroll) {
        this.container.addEventListener('scroll', this.onScrollDebounced, false);
        this.rafOnScroll = window.requestAnimationFrame(this.onScroll);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$props2 = this.props,
          onResize = _this$props2.onResize,
          onScroll = _this$props2.onScroll;

      if (onResize) {
        window.cancelAnimationFrame(this.rafOnResize);
        this.sensor.contentWindow.removeEventListener('resize', this.onResizeDebounced, false);

        if (this.onResizeDebounced.cancel) {
          this.onResizeDebounced.cancel();
        }
      }

      if (onScroll) {
        window.cancelAnimationFrame(this.rafOnScroll);
        this.container.removeEventListener('scroll', this.onScrollDebounced, false);

        if (this.onScrollDebounced.cancel) {
          this.onScrollDebounced.cancel();
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          onResize = _this$props3.onResize,
          onScroll = _this$props3.onScroll,
          _debounceTimeout = _this$props3.debounceTimeout,
          _debounceOptions = _this$props3.debounceOptions,
          style = _this$props3.style,
          render = _this$props3.children,
          props = _objectWithoutProperties(_this$props3, ["onResize", "onScroll", "debounceTimeout", "debounceOptions", "style", "children"]);

      var _this$state = this.state,
          width = _this$state.width,
          height = _this$state.height,
          offsetLeft = _this$state.offsetLeft,
          offsetTop = _this$state.offsetTop,
          scrollLeft = _this$state.scrollLeft,
          scrollTop = _this$state.scrollTop;
      var shouldRender = onResize && width > -1 && height > -1 || onScroll && offsetLeft > -1 && offsetTop > -1 && scrollLeft > -1 && scrollTop > -1;
      return _react["default"].createElement("div", _extends({
        ref: this.onContainerRef,
        style: _objectSpread({
          position: 'relative'
        }, style)
      }, props), onResize ? _react["default"].createElement("iframe", {
        ref: this.onSensorRef,
        title: "Element resize sensor",
        style: iframeStyle
      }) : null, shouldRender ? render({
        width: width,
        height: height,
        offsetLeft: offsetLeft,
        offsetTop: offsetTop,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      }) : null);
    }
  }]);

  return ReactElementResize;
}(_react["default"].Component);

exports.ReactElementResize = ReactElementResize;

_defineProperty(ReactElementResize, "defaultProps", {
  onResize: undefined,
  onScroll: undefined,
  debounceTimeout: -1,
  debounceOptions: undefined,
  style: {},
  children: function children() {
    return null;
  }
});