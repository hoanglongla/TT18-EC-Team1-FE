{"ast":null,"code":"import _objectSpread from \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\shared\\\\common\\\\UI\\\\GlideCarousel\\\\GlideCarousel.js\";\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Glide from '@glidejs/glide';\nimport '@glidejs/glide/dist/css/glide.core.min.css';\nimport GlideWrapper, { GlideSlideWrapper, ButtonControlWrapper, ButtonWrapper, BulletControlWrapper, BulletButton, DefaultBtn } from './GlideCarousel.style';\n\nvar GlideCarousel = function GlideCarousel(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      options = _ref.options,\n      controls = _ref.controls,\n      prevButton = _ref.prevButton,\n      nextButton = _ref.nextButton,\n      bullets = _ref.bullets,\n      numberOfBullets = _ref.numberOfBullets,\n      carouselSelector = _ref.carouselSelector;\n  // Add all classs to an array.\n  var addAllClasses = ['glide']; // className prop checking.\n\n  if (className) {\n    addAllClasses.push(className);\n  } // number of bullets loop.\n\n\n  var totalBullets = [];\n\n  for (var i = 0; i < numberOfBullets; i++) {\n    totalBullets.push(i);\n  } // Load glide.\n\n\n  useEffect(function () {\n    var glide = new Glide(carouselSelector ? \"#\".concat(carouselSelector) : '#glide', _objectSpread({}, options));\n    glide.mount();\n  }, []);\n  return /*#__PURE__*/React.createElement(GlideWrapper, {\n    className: addAllClasses.join(' '),\n    id: carouselSelector || 'glide',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"glide__track\",\n    \"data-glide-el\": \"track\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"glide__slides\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, children)), controls && /*#__PURE__*/React.createElement(ButtonControlWrapper, {\n    className: \"glide__controls\",\n    \"data-glide-el\": \"controls\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonWrapper, {\n    className: \"glide__prev--area\",\n    \"data-glide-dir\": \"<\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, prevButton ? prevButton : /*#__PURE__*/React.createElement(DefaultBtn, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 40\n    }\n  }, \"Prev\")), /*#__PURE__*/React.createElement(ButtonWrapper, {\n    className: \"glide__next--area\",\n    \"data-glide-dir\": \">\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, nextButton ? nextButton : /*#__PURE__*/React.createElement(DefaultBtn, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 40\n    }\n  }, \"Next\"))), bullets && /*#__PURE__*/React.createElement(BulletControlWrapper, {\n    className: \"glide__bullets\",\n    \"data-glide-el\": \"controls[nav]\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, totalBullets.map(function (index) {\n    return /*#__PURE__*/React.createElement(BulletButton, {\n      key: index,\n      className: \"glide__bullet\",\n      \"data-glide-dir\": \"=\".concat(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    });\n  }))));\n}; // Glide Slide wrapper component.\n\n\nvar GlideSlide = function GlideSlide(_ref2) {\n  var children = _ref2.children;\n  return /*#__PURE__*/React.createElement(GlideSlideWrapper, {\n    className: \"glide__slide\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nGlideCarousel.propTypes = {\n  /** className of the GlideCarousel. */\n  className: PropTypes.string,\n\n  /** Children. */\n  children: PropTypes.element,\n\n  /** You can add your custom glid options using this prop. */\n  options: PropTypes.object,\n\n  /** Hide || show controls nav. */\n  controls: PropTypes.bool,\n\n  /** Hide || show bullets nav. */\n  bullets: PropTypes.bool,\n\n  /** This prop only take your slider / carousel / testimonials data length. [Note: if \"bullets\" props is set TRUE, then \"numberOfBullets\" must be added] */\n  numberOfBullets: PropTypes.number,\n\n  /** Set previous button for glide carousel. */\n  prevButton: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /** Set next button for glide carousel. */\n  nextButton: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n};\nGlideSlide.propTypes = {\n  /** Children. */\n  children: PropTypes.element\n}; // GlideCarousel default props.\n\nGlideCarousel.defaultProps = {\n  controls: true\n};\nexport { GlideSlide };\nexport default GlideCarousel;","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/shared/common/UI/GlideCarousel/GlideCarousel.js"],"names":["React","Fragment","useEffect","PropTypes","Glide","GlideWrapper","GlideSlideWrapper","ButtonControlWrapper","ButtonWrapper","BulletControlWrapper","BulletButton","DefaultBtn","GlideCarousel","className","children","options","controls","prevButton","nextButton","bullets","numberOfBullets","carouselSelector","addAllClasses","push","totalBullets","i","glide","mount","join","map","index","GlideSlide","propTypes","string","element","object","bool","number","oneOfType","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Glide from '@glidejs/glide';\r\nimport '@glidejs/glide/dist/css/glide.core.min.css';\r\nimport GlideWrapper, {\r\n  GlideSlideWrapper,\r\n  ButtonControlWrapper,\r\n  ButtonWrapper,\r\n  BulletControlWrapper,\r\n  BulletButton,\r\n  DefaultBtn,\r\n} from './GlideCarousel.style';\r\n\r\nconst GlideCarousel = ({\r\n  className,\r\n  children,\r\n  options,\r\n  controls,\r\n  prevButton,\r\n  nextButton,\r\n  bullets,\r\n  numberOfBullets,\r\n  carouselSelector,\r\n}) => {\r\n  // Add all classs to an array.\r\n  const addAllClasses = ['glide'];\r\n\r\n  // className prop checking.\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  // number of bullets loop.\r\n  const totalBullets = [];\r\n  for (let i = 0; i < numberOfBullets; i++) {\r\n    totalBullets.push(i);\r\n  }\r\n\r\n  // Load glide.\r\n  useEffect(() => {\r\n    const glide = new Glide(\r\n      carouselSelector ? `#${carouselSelector}` : '#glide',\r\n      {\r\n        ...options,\r\n      }\r\n    );\r\n    glide.mount();\r\n  }, []);\r\n\r\n  return (\r\n    <GlideWrapper\r\n      className={addAllClasses.join(' ')}\r\n      id={carouselSelector || 'glide'}\r\n    >\r\n      <div className=\"glide__track\" data-glide-el=\"track\">\r\n        <ul className=\"glide__slides\">{children}</ul>\r\n      </div>\r\n\r\n      {/** if controls prop true then show controls nav. */}\r\n      {controls && (\r\n        <ButtonControlWrapper\r\n          className=\"glide__controls\"\r\n          data-glide-el=\"controls\"\r\n        >\r\n          <ButtonWrapper className=\"glide__prev--area\" data-glide-dir=\"<\">\r\n            {prevButton ? prevButton : <DefaultBtn>Prev</DefaultBtn>}\r\n          </ButtonWrapper>\r\n          <ButtonWrapper className=\"glide__next--area\" data-glide-dir=\">\">\r\n            {nextButton ? nextButton : <DefaultBtn>Next</DefaultBtn>}\r\n          </ButtonWrapper>\r\n        </ButtonControlWrapper>\r\n      )}\r\n\r\n      {/** if bullets prop true then show bullets nav. */}\r\n      {bullets && (\r\n        <BulletControlWrapper\r\n          className=\"glide__bullets\"\r\n          data-glide-el=\"controls[nav]\"\r\n        >\r\n          <Fragment>\r\n            {totalBullets.map(index => (\r\n              <BulletButton\r\n                key={index}\r\n                className=\"glide__bullet\"\r\n                data-glide-dir={`=${index}`}\r\n              />\r\n            ))}\r\n          </Fragment>\r\n        </BulletControlWrapper>\r\n      )}\r\n    </GlideWrapper>\r\n  );\r\n};\r\n\r\n// Glide Slide wrapper component.\r\nconst GlideSlide = ({ children }) => {\r\n  return (\r\n    <GlideSlideWrapper className=\"glide__slide\">{children}</GlideSlideWrapper>\r\n  );\r\n};\r\n\r\nGlideCarousel.propTypes = {\r\n  /** className of the GlideCarousel. */\r\n  className: PropTypes.string,\r\n\r\n  /** Children. */\r\n  children: PropTypes.element,\r\n\r\n  /** You can add your custom glid options using this prop. */\r\n  options: PropTypes.object,\r\n\r\n  /** Hide || show controls nav. */\r\n  controls: PropTypes.bool,\r\n\r\n  /** Hide || show bullets nav. */\r\n  bullets: PropTypes.bool,\r\n\r\n  /** This prop only take your slider / carousel / testimonials data length. [Note: if \"bullets\" props is set TRUE, then \"numberOfBullets\" must be added] */\r\n  numberOfBullets: PropTypes.number,\r\n\r\n  /** Set previous button for glide carousel. */\r\n  prevButton: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n\r\n  /** Set next button for glide carousel. */\r\n  nextButton: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n};\r\n\r\nGlideSlide.propTypes = {\r\n  /** Children. */\r\n  children: PropTypes.element,\r\n};\r\n\r\n// GlideCarousel default props.\r\nGlideCarousel.defaultProps = {\r\n  controls: true,\r\n};\r\n\r\nexport { GlideSlide };\r\n\r\nexport default GlideCarousel;\r\n"]},"metadata":{},"sourceType":"module"}