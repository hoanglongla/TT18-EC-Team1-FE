{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useReducer, useEffect } from 'react';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\n\nfunction sleep(time) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, time);\n  });\n}\n\nfunction SuperFetch(_x) {\n  return _SuperFetch.apply(this, arguments);\n}\n\nfunction _SuperFetch() {\n  _SuperFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n    var method,\n        headers,\n        body,\n        options,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            method = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 'GET';\n            headers = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {\n              'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n            };\n            body = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};\n            NProgress.start(); // await sleep(1000); // demo purpose only\n\n            options = {\n              method: method,\n              headers: headers\n            };\n            if (method === 'POST' || method === 'PUT') options = _objectSpread(_objectSpread({}, options), {}, {\n              body: body\n            }); // authentication\n            // we will had custom headers here.\n\n            return _context2.abrupt(\"return\", fetch(url, options).then(function (res) {\n              NProgress.done();\n              return Promise.resolve(res.json());\n            }).catch(function (error) {\n              return Promise.reject(error);\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _SuperFetch.apply(this, arguments);\n}\n\nfunction dataFetchReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        error: false\n      });\n\n    case 'FETCH_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload.slice(0, state.limit),\n        total: action.payload,\n        loading: false,\n        error: false\n      });\n\n    case 'FETCH_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: true\n      });\n\n    case 'LOAD_MORE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: [].concat(_toConsumableArray(state.data), _toConsumableArray(state.total.slice(state.data.length, state.data.length + state.limit))),\n        loading: false,\n        error: false\n      });\n\n    default:\n      throw new Error();\n  }\n}\n\nvar useDataApi = function useDataApi(initialUrl) {\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n  var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  var _useState = useState(initialUrl),\n      _useState2 = _slicedToArray(_useState, 2),\n      url = _useState2[0],\n      setUrl = _useState2[1];\n\n  var _useReducer = useReducer(dataFetchReducer, {\n    loading: false,\n    error: false,\n    data: initialData,\n    total: initialData,\n    limit: limit\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  useEffect(function () {\n    var didCancel = false;\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: 'FETCH_INIT'\n                });\n                _context.prev = 1;\n                _context.next = 4;\n                return SuperFetch(url);\n\n              case 4:\n                result = _context.sent;\n\n                if (!didCancel) {\n                  dispatch({\n                    type: 'FETCH_SUCCESS',\n                    payload: result\n                  });\n                }\n\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n\n                if (!didCancel) {\n                  dispatch({\n                    type: 'FETCH_FAILURE'\n                  });\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 8]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n    return function () {\n      didCancel = true;\n    };\n  }, [url]);\n\n  var loadMoreData = function loadMoreData() {\n    // dispatch({ type: 'FETCH_INIT' });\n    dispatch({\n      type: 'LOAD_MORE'\n    });\n  };\n\n  var doFetch = function doFetch(url) {\n    setUrl(url);\n  };\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    doFetch: doFetch,\n    loadMoreData: loadMoreData\n  });\n};\n\nexport default useDataApi;","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/shared/common/library/hooks/useDataApi.js"],"names":["useState","useReducer","useEffect","NProgress","sleep","time","Promise","resolve","setTimeout","SuperFetch","url","method","headers","body","start","options","fetch","then","res","done","json","catch","error","reject","dataFetchReducer","state","action","type","loading","data","payload","slice","limit","total","length","Error","useDataApi","initialUrl","initialData","setUrl","dispatch","didCancel","fetchData","result","loadMoreData","doFetch"],"mappings":"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","sourcesContent":["import { useState, useReducer, useEffect } from 'react';\r\nimport NProgress from 'nprogress';\r\nimport 'nprogress/nprogress.css';\r\n\r\nfunction sleep(time) {\r\n  return new Promise(resolve => setTimeout(resolve, time));\r\n}\r\n\r\nasync function SuperFetch(\r\n  url,\r\n  method = 'GET',\r\n  headers = {\r\n    'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n  },\r\n  body = {}\r\n) {\r\n  NProgress.start();\r\n  // await sleep(1000); // demo purpose only\r\n  let options = {\r\n    method,\r\n    headers,\r\n  };\r\n  if (method === 'POST' || method === 'PUT') options = { ...options, body };\r\n\r\n  // authentication\r\n  // we will had custom headers here.\r\n\r\n  return fetch(url, options)\r\n    .then(res => {\r\n      NProgress.done();\r\n      return Promise.resolve(res.json());\r\n    })\r\n    .catch(error => Promise.reject(error));\r\n}\r\n\r\nfunction dataFetchReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'FETCH_INIT':\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n      };\r\n    case 'FETCH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        data: action.payload.slice(0, state.limit),\r\n        total: action.payload,\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    case 'FETCH_FAILURE':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: true,\r\n      };\r\n    case 'LOAD_MORE':\r\n      return {\r\n        ...state,\r\n        data: [\r\n          ...state.data,\r\n          ...state.total.slice(\r\n            state.data.length,\r\n            state.data.length + state.limit\r\n          ),\r\n        ],\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nconst useDataApi = (initialUrl, limit = 12, initialData = []) => {\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  const [state, dispatch] = useReducer(dataFetchReducer, {\r\n    loading: false,\r\n    error: false,\r\n    data: initialData,\r\n    total: initialData,\r\n    limit: limit,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let didCancel = false;\r\n\r\n    const fetchData = async () => {\r\n      dispatch({ type: 'FETCH_INIT' });\r\n\r\n      try {\r\n        const result = await SuperFetch(url);\r\n        if (!didCancel) {\r\n          dispatch({ type: 'FETCH_SUCCESS', payload: result });\r\n        }\r\n      } catch (error) {\r\n        if (!didCancel) {\r\n          dispatch({ type: 'FETCH_FAILURE' });\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n\r\n    return () => {\r\n      didCancel = true;\r\n    };\r\n  }, [url]);\r\n  const loadMoreData = () => {\r\n    // dispatch({ type: 'FETCH_INIT' });\r\n    dispatch({ type: 'LOAD_MORE' });\r\n  };\r\n  const doFetch = url => {\r\n    setUrl(url);\r\n  };\r\n\r\n  return { ...state, doFetch, loadMoreData };\r\n};\r\n\r\nexport default useDataApi;\r\n"]},"metadata":{},"sourceType":"module"}