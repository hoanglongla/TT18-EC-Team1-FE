{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\For study\\\\Github\\\\GitClone\\\\Team6-FE\\\\isomorphic\\\\packages\\\\hotel\\\\src\\\\container\\\\SignUp\\\\SignUpForm.js\";\n\nimport React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Redirect } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport RenderSignUpForm from '@hotel/components/SignUp/RenderSignUpForm';\nimport { AuthContext } from '../../context/AuthProvider';\nvar initialValues = {\n  email: '',\n  username: '',\n  password: '',\n  confirmPassword: '',\n  termsAndConditions: false,\n  rememberMe: false\n};\n\nvar getRegisterValidationSchema = function getRegisterValidationSchema() {\n  return Yup.object().shape({\n    username: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Username is Required!'),\n    email: Yup.string().email('Invalid email').required('Email is Required!'),\n    password: Yup.string().min(6, 'Password has to be longer than 6 characters!').max(20, 'Too Long!').required('Password is required!'),\n    phonenumber: Yup.string().min(10, 'Too short!').required('Phone number is require'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords are not the same!').required('Password confirmation is required'),\n    termsAndConditions: Yup.bool().test('consent', 'You have to agree with our Terms and Conditions!', function (value) {\n      return value === true;\n    }).required('You have to agree with our Terms and Conditions!')\n  });\n};\n\nexport default (function () {\n  var _useContext = useContext(AuthContext),\n      signUp = _useContext.signUp,\n      loggedIn = _useContext.loggedIn;\n\n  if (loggedIn) return /*#__PURE__*/React.createElement(Redirect, {\n    to: {\n      pathname: '/'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 24\n    }\n  });\n\n  var handleSubmit = function handleSubmit(formProps) {\n    signUp(formProps);\n  };\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: getRegisterValidationSchema,\n    render: RenderSignUpForm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  });\n});","map":{"version":3,"sources":["D:/For study/Github/GitClone/Team6-FE/isomorphic/packages/hotel/src/container/SignUp/SignUpForm.js"],"names":["React","useContext","Formik","Redirect","Yup","RenderSignUpForm","AuthContext","initialValues","email","username","password","confirmPassword","termsAndConditions","rememberMe","getRegisterValidationSchema","object","shape","string","min","max","required","phonenumber","oneOf","ref","bool","test","value","signUp","loggedIn","pathname","handleSubmit","formProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,gBAAP,MAA6B,2CAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,QAAQ,EAAE,EAHU;AAIpBC,EAAAA,eAAe,EAAE,EAJG;AAKpBC,EAAAA,kBAAkB,EAAE,KALA;AAMpBC,EAAAA,UAAU,EAAE;AANQ,CAAtB;;AASA,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,GAAM;AACxC,SAAOV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;AACxBP,IAAAA,QAAQ,EAAEL,GAAG,CAACa,MAAJ,GACPC,GADO,CACH,CADG,EACA,YADA,EAEPC,GAFO,CAEH,EAFG,EAEC,WAFD,EAGPC,QAHO,CAGE,uBAHF,CADc;AAKxBZ,IAAAA,KAAK,EAAEJ,GAAG,CAACa,MAAJ,GACJT,KADI,CACE,eADF,EAEJY,QAFI,CAEK,oBAFL,CALiB;AAQxBV,IAAAA,QAAQ,EAAEN,GAAG,CAACa,MAAJ,GACPC,GADO,CACH,CADG,EACA,8CADA,EAEPC,GAFO,CAEH,EAFG,EAEC,WAFD,EAGPC,QAHO,CAGE,uBAHF,CARc;AAYxBC,IAAAA,WAAW,EAAEjB,GAAG,CAACa,MAAJ,GACVC,GADU,CACN,EADM,EACF,YADE,EAEVE,QAFU,CAED,yBAFC,CAZW;AAexBT,IAAAA,eAAe,EAAEP,GAAG,CAACa,MAAJ,GACdK,KADc,CACR,CAAClB,GAAG,CAACmB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADQ,EACqB,6BADrB,EAEdH,QAFc,CAEL,mCAFK,CAfO;AAkBxBR,IAAAA,kBAAkB,EAAER,GAAG,CAACoB,IAAJ,GACjBC,IADiB,CAEhB,SAFgB,EAGhB,kDAHgB,EAIhB,UAAAC,KAAK;AAAA,aAAIA,KAAK,KAAK,IAAd;AAAA,KAJW,EAMjBN,QANiB,CAMR,kDANQ;AAlBI,GAAnB,CAAP;AA0BD,CA3BD;;AA6BA,gBAAe,YAAM;AACnB,oBAA6BnB,UAAU,CAACK,WAAD,CAAvC;AAAA,MAAQqB,MAAR,eAAQA,MAAR;AAAA,MAAgBC,QAAhB,eAAgBA,QAAhB;;AACA,MAAIA,QAAJ,EAAc,oBAAO,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;;AACd,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,SAAS,EAAI;AAChCJ,IAAAA,MAAM,CAACI,SAAD,CAAN;AACD,GAFD;;AAGA,sBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAExB,aADjB;AAEE,IAAA,QAAQ,EAAEuB,YAFZ;AAGE,IAAA,gBAAgB,EAAEhB,2BAHpB;AAIE,IAAA,MAAM,EAAET,gBAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAdD","sourcesContent":["import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Redirect } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport RenderSignUpForm from '@hotel/components/SignUp/RenderSignUpForm';\nimport { AuthContext } from '../../context/AuthProvider';\n\nconst initialValues = {\n  email: '',\n  username: '',\n  password: '',\n  confirmPassword: '',\n  termsAndConditions: false,\n  rememberMe: false,\n};\n\nconst getRegisterValidationSchema = () => {\n  return Yup.object().shape({\n    username: Yup.string()\n      .min(2, 'Too Short!')\n      .max(50, 'Too Long!')\n      .required('Username is Required!'),\n    email: Yup.string()\n      .email('Invalid email')\n      .required('Email is Required!'),\n    password: Yup.string()\n      .min(6, 'Password has to be longer than 6 characters!')\n      .max(20, 'Too Long!')\n      .required('Password is required!'),\n    phonenumber: Yup.string()\n      .min(10, 'Too short!')\n      .required('Phone number is require'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Passwords are not the same!')\n      .required('Password confirmation is required'),\n    termsAndConditions: Yup.bool()\n      .test(\n        'consent',\n        'You have to agree with our Terms and Conditions!',\n        value => value === true\n      )\n      .required('You have to agree with our Terms and Conditions!'),\n  });\n};\n\nexport default () => {\n  const { signUp, loggedIn } = useContext(AuthContext);\n  if (loggedIn) return <Redirect to={{ pathname: '/' }} />;\n  const handleSubmit = formProps => {\n    signUp(formProps);\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={getRegisterValidationSchema}\n      render={RenderSignUpForm}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}