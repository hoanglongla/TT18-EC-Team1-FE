{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _indexUtils = require('../core/indexUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction getId() {\n  return 'page';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId();\n  var page = 1;\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, id, page, function (currentRefinement) {\n    if (typeof currentRefinement === 'string') {\n      currentRefinement = parseInt(currentRefinement, 10);\n    }\n\n    return currentRefinement;\n  });\n}\n/**\n * InfiniteHits connector provides the logic to create connected\n * components that will render an continuous list of results retrieved from\n * Algolia. This connector provides a function to load more results.\n * @name connectInfiniteHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {boolean} hasMore - indicates if there are more pages to load\n * @providedPropType {function} refine - call to load more results\n */\n\n\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaInfiniteHits',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = (0, _indexUtils.getResults)(searchResults, this.context);\n\n    if (!results) {\n      this._allResults = [];\n      return {\n        hits: this._allResults,\n        hasMore: false\n      };\n    }\n\n    var hits = results.hits,\n        page = results.page,\n        nbPages = results.nbPages; // If it is the same page we do not touch the page result list\n\n    if (page === 0) {\n      this._allResults = hits;\n    } else if (page > this.previousPage) {\n      this._allResults = [].concat(_toConsumableArray(this._allResults), _toConsumableArray(hits));\n    } else if (page < this.previousPage) {\n      this._allResults = hits;\n    }\n\n    var lastPageIndex = nbPages - 1;\n    var hasMore = page < lastPageIndex;\n    this.previousPage = page;\n    return {\n      hits: this._allResults,\n      hasMore: hasMore\n    };\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQueryParameters({\n      page: getCurrentRefinement(props, searchState, this.context) - 1\n    });\n  },\n  refine: function refine(props, searchState) {\n    var id = getId();\n    var nextPage = getCurrentRefinement(props, searchState, this.context) + 1;\n\n    var nextValue = _defineProperty({}, id, nextPage);\n\n    var resetPage = false;\n    return (0, _indexUtils.refineValue)(searchState, nextValue, this.context, resetPage);\n  }\n});","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/node_modules/react-instantsearch/src/connectors/connectInfiniteHits.js"],"names":["Object","defineProperty","exports","value","_createConnector","require","_createConnector2","_interopRequireDefault","_indexUtils","obj","__esModule","default","_defineProperty","key","enumerable","configurable","writable","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","getId","getCurrentRefinement","props","searchState","context","id","page","getCurrentRefinementValue","currentRefinement","parseInt","displayName","getProvidedProps","searchResults","results","getResults","_allResults","hits","hasMore","nbPages","previousPage","concat","lastPageIndex","getSearchParameters","searchParameters","setQueryParameters","refine","nextPage","nextValue","resetPage","refineValue"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _indexUtils = require('../core/indexUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction getId() {\n  return 'page';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId();\n  var page = 1;\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, id, page, function (currentRefinement) {\n    if (typeof currentRefinement === 'string') {\n      currentRefinement = parseInt(currentRefinement, 10);\n    }\n    return currentRefinement;\n  });\n}\n\n/**\n * InfiniteHits connector provides the logic to create connected\n * components that will render an continuous list of results retrieved from\n * Algolia. This connector provides a function to load more results.\n * @name connectInfiniteHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {boolean} hasMore - indicates if there are more pages to load\n * @providedPropType {function} refine - call to load more results\n */\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaInfiniteHits',\n\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = (0, _indexUtils.getResults)(searchResults, this.context);\n\n    if (!results) {\n      this._allResults = [];\n      return {\n        hits: this._allResults,\n        hasMore: false\n      };\n    }\n\n    var hits = results.hits,\n        page = results.page,\n        nbPages = results.nbPages;\n\n    // If it is the same page we do not touch the page result list\n\n    if (page === 0) {\n      this._allResults = hits;\n    } else if (page > this.previousPage) {\n      this._allResults = [].concat(_toConsumableArray(this._allResults), _toConsumableArray(hits));\n    } else if (page < this.previousPage) {\n      this._allResults = hits;\n    }\n\n    var lastPageIndex = nbPages - 1;\n    var hasMore = page < lastPageIndex;\n    this.previousPage = page;\n    return {\n      hits: this._allResults,\n      hasMore: hasMore\n    };\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQueryParameters({\n      page: getCurrentRefinement(props, searchState, this.context) - 1\n    });\n  },\n  refine: function refine(props, searchState) {\n    var id = getId();\n    var nextPage = getCurrentRefinement(props, searchState, this.context) + 1;\n    var nextValue = _defineProperty({}, id, nextPage);\n    var resetPage = false;\n    return (0, _indexUtils.refineValue)(searchState, nextValue, this.context, resetPage);\n  }\n});"]},"metadata":{},"sourceType":"script"}