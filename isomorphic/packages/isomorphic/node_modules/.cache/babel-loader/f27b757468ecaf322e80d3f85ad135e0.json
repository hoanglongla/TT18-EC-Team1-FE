{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _indexUtils = require('../core/indexUtils');\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, id, null, function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n\n    return null;\n  });\n}\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\n\n\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaSortBy',\n  propTypes: {\n    defaultRefinement: _propTypes2.default.string,\n    items: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n      label: _propTypes2.default.string,\n      value: _propTypes2.default.string.isRequired\n    })).isRequired,\n    transformItems: _propTypes2.default.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _extends({}, item, {\n        isRefined: true\n      }) : _extends({}, item, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return (0, _indexUtils.refineValue)(searchState, nextValue, this.context, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return (0, _indexUtils.cleanUpValue)(searchState, this.context, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var selectedIndex = getCurrentRefinement(props, searchState, this.context);\n    return searchParameters.setIndex(selectedIndex);\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/react-instantsearch/src/connectors/connectSortBy.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_propTypes","require","_propTypes2","_interopRequireDefault","_indexUtils","_createConnector","_createConnector2","obj","__esModule","default","_defineProperty","enumerable","configurable","writable","getId","getCurrentRefinement","props","searchState","context","id","getCurrentRefinementValue","currentRefinement","displayName","propTypes","defaultRefinement","string","items","arrayOf","shape","label","isRequired","transformItems","func","getProvidedProps","map","item","isRefined","refine","nextRefinement","nextValue","resetPage","refineValue","cleanUp","cleanUpValue","getSearchParameters","searchParameters","selectedIndex","setIndex","getMetadata"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGJ,MAAM,CAACK,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIV,MAAM,CAACY,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,IAAIS,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACH,UAAD,CAAxC;;AAEA,IAAII,WAAW,GAAGH,OAAO,CAAC,oBAAD,CAAzB;;AAEA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,yBAAD,CAA9B;;AAEA,IAAIK,iBAAiB,GAAGH,sBAAsB,CAACE,gBAAD,CAA9C;;AAEA,SAASF,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASG,eAAT,CAAyBH,GAAzB,EAA8BX,GAA9B,EAAmCR,KAAnC,EAA0C;AAAE,MAAIQ,GAAG,IAAIW,GAAX,EAAgB;AAAEtB,IAAAA,MAAM,CAACC,cAAP,CAAsBqB,GAAtB,EAA2BX,GAA3B,EAAgC;AAAER,MAAAA,KAAK,EAAEA,KAAT;AAAgBuB,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEN,IAAAA,GAAG,CAACX,GAAD,CAAH,GAAWR,KAAX;AAAmB;;AAAC,SAAOmB,GAAP;AAAa;;AAEjN,SAASO,KAAT,GAAiB;AACf,SAAO,QAAP;AACD;;AAED,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,WAArC,EAAkDC,OAAlD,EAA2D;AACzD,MAAIC,EAAE,GAAGL,KAAK,CAACE,KAAD,CAAd;AACA,SAAO,CAAC,GAAGZ,WAAW,CAACgB,yBAAhB,EAA2CJ,KAA3C,EAAkDC,WAAlD,EAA+DC,OAA/D,EAAwEC,EAAxE,EAA4E,IAA5E,EAAkF,UAAUE,iBAAV,EAA6B;AACpH,QAAIA,iBAAJ,EAAuB;AACrB,aAAOA,iBAAP;AACD;;AACD,WAAO,IAAP;AACD,GALM,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,OAAO,CAACsB,OAAR,GAAkB,CAAC,GAAGH,iBAAiB,CAACG,OAAtB,EAA+B;AAC/Ca,EAAAA,WAAW,EAAE,eADkC;AAG/CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,iBAAiB,EAAEtB,WAAW,CAACO,OAAZ,CAAoBgB,MAD9B;AAETC,IAAAA,KAAK,EAAExB,WAAW,CAACO,OAAZ,CAAoBkB,OAApB,CAA4BzB,WAAW,CAACO,OAAZ,CAAoBmB,KAApB,CAA0B;AAC3DC,MAAAA,KAAK,EAAE3B,WAAW,CAACO,OAAZ,CAAoBgB,MADgC;AAE3DrC,MAAAA,KAAK,EAAEc,WAAW,CAACO,OAAZ,CAAoBgB,MAApB,CAA2BK;AAFyB,KAA1B,CAA5B,EAGHA,UALK;AAMTC,IAAAA,cAAc,EAAE7B,WAAW,CAACO,OAAZ,CAAoBuB;AAN3B,GAHoC;AAY/CC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BjB,KAA1B,EAAiCC,WAAjC,EAA8C;AAC9D,QAAII,iBAAiB,GAAGN,oBAAoB,CAACC,KAAD,EAAQC,WAAR,EAAqB,KAAKC,OAA1B,CAA5C;AACA,QAAIQ,KAAK,GAAGV,KAAK,CAACU,KAAN,CAAYQ,GAAZ,CAAgB,UAAUC,IAAV,EAAgB;AAC1C,aAAOA,IAAI,CAAC/C,KAAL,KAAeiC,iBAAf,GAAmChC,QAAQ,CAAC,EAAD,EAAK8C,IAAL,EAAW;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAX,CAA3C,GAA6E/C,QAAQ,CAAC,EAAD,EAAK8C,IAAL,EAAW;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAX,CAA5F;AACD,KAFW,CAAZ;AAGA,WAAO;AACLV,MAAAA,KAAK,EAAEV,KAAK,CAACe,cAAN,GAAuBf,KAAK,CAACe,cAAN,CAAqBL,KAArB,CAAvB,GAAqDA,KADvD;AAELL,MAAAA,iBAAiB,EAAEA;AAFd,KAAP;AAID,GArB8C;AAsB/CgB,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBrB,KAAhB,EAAuBC,WAAvB,EAAoCqB,cAApC,EAAoD;AAC1D,QAAInB,EAAE,GAAGL,KAAK,EAAd;;AACA,QAAIyB,SAAS,GAAG7B,eAAe,CAAC,EAAD,EAAKS,EAAL,EAASmB,cAAT,CAA/B;;AACA,QAAIE,SAAS,GAAG,IAAhB;AACA,WAAO,CAAC,GAAGpC,WAAW,CAACqC,WAAhB,EAA6BxB,WAA7B,EAA0CsB,SAA1C,EAAqD,KAAKrB,OAA1D,EAAmEsB,SAAnE,CAAP;AACD,GA3B8C;AA4B/CE,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiB1B,KAAjB,EAAwBC,WAAxB,EAAqC;AAC5C,WAAO,CAAC,GAAGb,WAAW,CAACuC,YAAhB,EAA8B1B,WAA9B,EAA2C,KAAKC,OAAhD,EAAyDJ,KAAK,EAA9D,CAAP;AACD,GA9B8C;AA+B/C8B,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BC,gBAA7B,EAA+C7B,KAA/C,EAAsDC,WAAtD,EAAmE;AACtF,QAAI6B,aAAa,GAAG/B,oBAAoB,CAACC,KAAD,EAAQC,WAAR,EAAqB,KAAKC,OAA1B,CAAxC;AACA,WAAO2B,gBAAgB,CAACE,QAAjB,CAA0BD,aAA1B,CAAP;AACD,GAlC8C;AAmC/CE,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,WAAO;AAAE7B,MAAAA,EAAE,EAAEL,KAAK;AAAX,KAAP;AACD;AArC8C,CAA/B,CAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _indexUtils = require('../core/indexUtils');\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, id, null, function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n    return null;\n  });\n}\n\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaSortBy',\n\n  propTypes: {\n    defaultRefinement: _propTypes2.default.string,\n    items: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n      label: _propTypes2.default.string,\n      value: _propTypes2.default.string.isRequired\n    })).isRequired,\n    transformItems: _propTypes2.default.func\n  },\n\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _extends({}, item, { isRefined: true }) : _extends({}, item, { isRefined: false });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n    var nextValue = _defineProperty({}, id, nextRefinement);\n    var resetPage = true;\n    return (0, _indexUtils.refineValue)(searchState, nextValue, this.context, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return (0, _indexUtils.cleanUpValue)(searchState, this.context, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var selectedIndex = getCurrentRefinement(props, searchState, this.context);\n    return searchParameters.setIndex(selectedIndex);\n  },\n  getMetadata: function getMetadata() {\n    return { id: getId() };\n  }\n});"]},"metadata":{},"sourceType":"script"}