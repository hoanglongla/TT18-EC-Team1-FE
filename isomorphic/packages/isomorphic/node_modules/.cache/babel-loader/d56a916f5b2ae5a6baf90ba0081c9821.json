{"ast":null,"code":"'use strict';\n\nvar SearchParameters = require('./SearchParameters');\n\nvar SearchResults = require('./SearchResults');\n\nvar DerivedHelper = require('./DerivedHelper');\n\nvar requestBuilder = require('./requestBuilder');\n\nvar events = require('events');\n\nvar inherits = require('./functions/inherits');\n\nvar flatten = require('lodash/flatten');\n\nvar forEach = require('lodash/forEach');\n\nvar isEmpty = require('lodash/isEmpty');\n\nvar map = require('lodash/map');\n\nvar url = require('./url');\n\nvar version = require('./version');\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {SearchParameters} state the current parameters with the latest changes applied\n * @property {SearchResults} lastResults the previous results received from Algolia. `null` before\n * the first request\n * @example\n * helper.on('change', function(state, lastResults) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {SearchParameters} state the parameters used for this search\n * @property {SearchResults} lastResults the results from the previous search. `null` if\n * it is the first search.\n * @example\n * helper.on('search', function(state, lastResults) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {SearchParameters} state the parameters used for this search\n * it is the first search.\n * @property {string} facet the facet searched into\n * @property {string} query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(state, facet, query) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {SearchParameters} state the parameters used for this search\n * it is the first search.\n * @example\n * helper.on('searchOnce', function(state) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {SearchResults} results the results received from Algolia\n * @property {SearchParameters} state the parameters used to query Algolia. Those might\n * be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(results, state) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {Error} error the error returned by the Algolia.\n * @example\n * helper.on('error', function(error) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\n\n\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (client.addAlgoliaAgent && !doesClientAgentContainsHelper(client)) {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\n\ninherits(AlgoliaSearchHelper, events.EventEmitter);\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\n\nAlgoliaSearchHelper.prototype.search = function () {\n  this._search();\n\n  return this;\n};\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\n\n\nAlgoliaSearchHelper.prototype.getQuery = function () {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\n\n\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n\n  var self = this;\n  this._currentNbQueries++;\n  this.emit('searchOnce', tempState);\n\n  if (cb) {\n    this.client.search(queries).then(function (content) {\n      self._currentNbQueries--;\n\n      if (self._currentNbQueries === 0) {\n        self.emit('searchQueueEmpty');\n      }\n\n      cb(null, new SearchResults(tempState, content.results), tempState);\n    }).catch(function (err) {\n      self._currentNbQueries--;\n\n      if (self._currentNbQueries === 0) {\n        self.emit('searchQueueEmpty');\n      }\n\n      cb(err, null, tempState);\n    });\n    return undefined;\n  }\n\n  return this.client.search(queries).then(function (content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function (e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\n\n\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n\n  if (!clientHasSFFV && typeof this.client.initIndex !== 'function') {\n    throw new Error('search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues');\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n  this._currentNbQueries++;\n  var self = this;\n  this.emit('searchForFacetValues', state, facet, query);\n  var searchForFacetValuesPromise = clientHasSFFV ? this.client.searchForFacetValues([{\n    indexName: state.index,\n    params: algoliaQuery\n  }]) : this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    content = Array.isArray(content) ? content[0] : content;\n    content.facetHits = forEach(content.facetHits, function (f) {\n      f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.value) : state.isFacetRefined(facet, f.value);\n    });\n    return content;\n  }, function (e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\n  this._change(this.state.setPage(0).setQuery(q));\n\n  return this;\n};\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\n\n\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\n  this._change(this.state.setPage(0).clearRefinements(name));\n\n  return this;\n};\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.clearTags = function () {\n  this._change(this.state.setPage(0).clearTags());\n\n  return this;\n};\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (facet, value) {\n  this._change(this.state.setPage(0).addDisjunctiveFacetRefinement(facet, value));\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\n\n\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (facet, value) {\n  this._change(this.state.setPage(0).addHierarchicalFacetRefinement(facet, value));\n\n  return this;\n};\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (attribute, operator, value) {\n  this._change(this.state.setPage(0).addNumericRefinement(attribute, operator, value));\n\n  return this;\n};\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\n  this._change(this.state.setPage(0).addFacetRefinement(facet, value));\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.addRefine = function () {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\n  this._change(this.state.setPage(0).addExcludeRefinement(facet, value));\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\n\n\nAlgoliaSearchHelper.prototype.addExclude = function () {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\n  this._change(this.state.setPage(0).addTagRefinement(tag));\n\n  return this;\n};\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (attribute, operator, value) {\n  this._change(this.state.setPage(0).removeNumericRefinement(attribute, operator, value));\n\n  return this;\n};\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (facet, value) {\n  this._change(this.state.setPage(0).removeDisjunctiveFacetRefinement(facet, value));\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (facet) {\n  this._change(this.state.setPage(0).removeHierarchicalFacetRefinement(facet));\n\n  return this;\n};\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\n  this._change(this.state.setPage(0).removeFacetRefinement(facet, value));\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.removeRefine = function () {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\n  this._change(this.state.setPage(0).removeExcludeRefinement(facet, value));\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\n\n\nAlgoliaSearchHelper.prototype.removeExclude = function () {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\n  this._change(this.state.setPage(0).removeTagRefinement(tag));\n\n  return this;\n};\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\n  this._change(this.state.setPage(0).toggleExcludeFacetRefinement(facet, value));\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\n\n\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\n  this._change(this.state.setPage(0).toggleFacetRefinement(facet, value));\n\n  return this;\n};\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\n\n\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\n  this._change(this.state.setPage(0).toggleTagRefinement(tag));\n\n  return this;\n};\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\n\n\nAlgoliaSearchHelper.prototype.nextPage = function () {\n  return this.setPage(this.state.page + 1);\n};\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\n\n\nAlgoliaSearchHelper.prototype.previousPage = function () {\n  return this.setPage(this.state.page - 1);\n};\n/**\n * @private\n */\n\n\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change(this.state.setPage(page));\n\n  return this;\n}\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\n  this._change(this.state.setPage(0).setIndex(name));\n\n  return this;\n};\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\n\n\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\n  this._change(this.state.setPage(0).setQueryParameter(parameter, value));\n\n  return this;\n};\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.setState = function (newState) {\n  this._change(SearchParameters.make(newState));\n\n  return this;\n};\n/**\n * Get the current search state stored in the helper. This object is immutable.\n * @param {string[]} [filters] optional filters to retrieve only a subset of the state\n * @return {SearchParameters|object} if filters is specified a plain object is\n * returned containing only the requested fields, otherwise return the unfiltered\n * state\n * @example\n * // Get the complete state as stored in the helper\n * helper.getState();\n * @example\n * // Get a part of the state with all the refinements on attributes and the query\n * helper.getState(['query', 'attribute:category']);\n */\n\n\nAlgoliaSearchHelper.prototype.getState = function (filters) {\n  if (filters === undefined) return this.state;\n  return this.state.filter(filters);\n};\n/**\n * DEPRECATED Get part of the state as a query string. By default, the output keys will not\n * be prefixed and will only take the applied refinements and the query.\n * @deprecated\n * @param {object} [options] May contain the following parameters :\n *\n * **filters** : possible values are all the keys of the [SearchParameters](#searchparameters), `index` for\n * the index, all the refinements with `attribute:*` or for some specific attributes with\n * `attribute:theAttribute`\n *\n * **prefix** : prefix in front of the keys\n *\n * **moreAttributes** : more values to be added in the query string. Those values\n *    won't be prefixed.\n * @return {string} the query string\n */\n\n\nAlgoliaSearchHelper.prototype.getStateAsQueryString = function getStateAsQueryString(options) {\n  var filters = options && options.filters || ['query', 'attribute:*'];\n  var partialState = this.getState(filters);\n  return url.getQueryStringFromState(partialState, options);\n};\n/**\n * DEPRECATED Read a query string and return an object containing the state. Use\n * url module.\n * @deprecated\n * @static\n * @param {string} queryString the query string that will be decoded\n * @param {object} options accepted options :\n *   - prefix : the prefix used for the saved attributes, you have to provide the\n *     same that was used for serialization\n * @return {object} partial search parameters object (same properties than in the\n * SearchParameters but not exhaustive)\n * @see {@link url#getStateFromQueryString}\n */\n\n\nAlgoliaSearchHelper.getConfigurationFromQueryString = url.getStateFromQueryString;\n/**\n * DEPRECATED Retrieve an object of all the properties that are not understandable as helper\n * parameters. Use url module.\n * @deprecated\n * @static\n * @param {string} queryString the query string to read\n * @param {object} options the options\n *   - prefixForParameters : prefix used for the helper configuration keys\n * @return {object} the object containing the parsed configuration that doesn't\n * to the helper\n */\n\nAlgoliaSearchHelper.getForeignConfigurationInQueryString = url.getUnrecognizedParametersInQueryString;\n/**\n * DEPRECATED Overrides part of the state with the properties stored in the provided query\n * string.\n * @deprecated\n * @param {string} queryString the query string containing the informations to url the state\n * @param {object} options optional parameters :\n *  - prefix : prefix used for the algolia parameters\n *  - triggerChange : if set to true the state update will trigger a change event\n */\n\nAlgoliaSearchHelper.prototype.setStateFromQueryString = function (queryString, options) {\n  var triggerChange = options && options.triggerChange || false;\n  var configuration = url.getStateFromQueryString(queryString, options);\n  var updatedState = this.state.setQueryParameters(configuration);\n  if (triggerChange) this.setState(updatedState);else this.overrideStateWithoutTriggeringChangeEvent(updatedState);\n};\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\n\n\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function (newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\n\n\nAlgoliaSearchHelper.prototype.isRefined = function (facet, value) {\n  if (this.state.isConjunctiveFacet(facet)) {\n    return this.state.isFacetRefined(facet, value);\n  } else if (this.state.isDisjunctiveFacet(facet)) {\n    return this.state.isDisjunctiveFacetRefined(facet, value);\n  }\n\n  throw new Error(facet + ' is not properly defined in this helper configuration' + '(use the facets or disjunctiveFacets keys to configure it)');\n};\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\n\n\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\n  if (!isEmpty(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  } // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n\n\n  return false;\n};\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\n\n\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\n\n\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\n\n\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\n  return this.state.isTagRefined(tag);\n};\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\n\n\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\n\n\nAlgoliaSearchHelper.prototype.getIndex = function () {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\n\n\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\n\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\n\nAlgoliaSearchHelper.prototype.getTags = function () {\n  return this.state.tagRefinements;\n};\n/**\n * Get a parameter of the search by its name. It is possible that a parameter is directly\n * defined in the index dashboard, but it will be undefined using this method.\n *\n * The complete list of parameters is\n * available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters have their own API)\n * @param {string} parameterName the parameter name\n * @return {any} the parameter value\n * @example\n * var hitsPerPage = helper.getQueryParameter('hitsPerPage');\n */\n\n\nAlgoliaSearchHelper.prototype.getQueryParameter = function (parameterName) {\n  return this.state.getQueryParameter(parameterName);\n};\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\n\n\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n    forEach(conjRefinements, function (r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n    forEach(excludeRefinements, function (r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n    forEach(disjRefinements, function (r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n  forEach(numericRefinements, function (value, operator) {\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n  return refinements;\n};\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\n\n\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\n\n\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n}; // /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\n\n\nAlgoliaSearchHelper.prototype._search = function () {\n  var state = this.state;\n\n  var mainQueries = requestBuilder._getQueries(state.index, state);\n\n  var states = [{\n    state: state,\n    queriesCount: mainQueries.length,\n    helper: this\n  }];\n  this.emit('search', state, this.lastResults);\n  var derivedQueries = map(this.derivedHelpers, function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n\n    var queries = requestBuilder._getQueries(derivedState.index, derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: queries.length,\n      helper: derivedHelper\n    });\n    derivedHelper.emit('search', derivedState, derivedHelper.lastResults);\n    return queries;\n  });\n  var queries = mainQueries.concat(flatten(derivedQueries));\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  try {\n    this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (err) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', err);\n  }\n};\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\n\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n  var results = content.results.slice();\n  forEach(states, function (s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n    helper.emit('result', formattedResponse, state);\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (queryId, err) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n  this.emit('error', err);\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function (query, facetFilters, numericFilters, tagFilters) {\n  return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;\n};\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\n\n\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\n  return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;\n};\n\nAlgoliaSearchHelper.prototype._change = function (newState) {\n  if (newState !== this.state) {\n    this.state = newState;\n    this.emit('change', this.state, this.lastResults);\n  }\n};\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\n\n\nAlgoliaSearchHelper.prototype.clearCache = function () {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\n\n\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\n  if (this.client === newClient) return this;\n\n  if (newClient.addAlgoliaAgent && !doesClientAgentContainsHelper(newClient)) {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.client = newClient;\n  return this;\n};\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\n\n\nAlgoliaSearchHelper.prototype.getClient = function () {\n  return this.client;\n};\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\n\n\nAlgoliaSearchHelper.prototype.derive = function (fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\n\n\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\n\n\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\n  return this._currentNbQueries > 0;\n};\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\n/*\n * This function tests if the _ua parameter of the client\n * already contains the JS Helper UA\n */\n\n\nfunction doesClientAgentContainsHelper(client) {\n  // this relies on JS Client internal variable, this might break if implementation changes\n  var currentAgent = client._ua;\n  return !currentAgent ? false : currentAgent.indexOf('JS Helper') !== -1;\n}\n\nmodule.exports = AlgoliaSearchHelper;","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/node_modules/algoliasearch-helper/src/algoliasearch.helper.js"],"names":["SearchParameters","require","SearchResults","DerivedHelper","requestBuilder","events","inherits","flatten","forEach","isEmpty","map","url","version","AlgoliaSearchHelper","client","index","options","addAlgoliaAgent","doesClientAgentContainsHelper","setClient","opts","state","make","lastResults","_queryId","_lastQueryIdReceived","derivedHelpers","_currentNbQueries","EventEmitter","prototype","search","_search","getQuery","_getHitsSearchParams","searchOnce","cb","tempState","setQueryParameters","queries","_getQueries","self","emit","then","content","results","catch","err","undefined","_originalResponse","e","searchForFacetValues","facet","query","maxFacetHits","userState","clientHasSFFV","initIndex","Error","isDisjunctive","isDisjunctiveFacet","algoliaQuery","getSearchForFacetQuery","searchForFacetValuesPromise","indexName","params","addIsRefined","Array","isArray","facetHits","f","isRefined","isDisjunctiveFacetRefined","value","isFacetRefined","setQuery","q","_change","setPage","clearRefinements","name","clearTags","addDisjunctiveFacetRefinement","addDisjunctiveRefine","apply","arguments","addHierarchicalFacetRefinement","addNumericRefinement","attribute","operator","addFacetRefinement","addRefine","addFacetExclusion","addExcludeRefinement","addExclude","addTag","tag","addTagRefinement","removeNumericRefinement","removeDisjunctiveFacetRefinement","removeDisjunctiveRefine","removeHierarchicalFacetRefinement","removeFacetRefinement","removeRefine","removeFacetExclusion","removeExcludeRefinement","removeExclude","removeTag","removeTagRefinement","toggleFacetExclusion","toggleExcludeFacetRefinement","toggleExclude","toggleRefinement","toggleFacetRefinement","toggleRefine","toggleTag","toggleTagRefinement","nextPage","page","previousPage","setCurrentPage","setIndex","setQueryParameter","parameter","setState","newState","getState","filters","filter","getStateAsQueryString","partialState","getQueryStringFromState","getConfigurationFromQueryString","getStateFromQueryString","getForeignConfigurationInQueryString","getUnrecognizedParametersInQueryString","setStateFromQueryString","queryString","triggerChange","configuration","updatedState","overrideStateWithoutTriggeringChangeEvent","isConjunctiveFacet","hasRefinements","getNumericRefinements","isHierarchicalFacet","isHierarchicalFacetRefined","isExcluded","isExcludeRefined","isDisjunctiveRefined","hasTag","isTagRefined","hasTagRefinements","getIndex","getCurrentPage","getPage","getTags","tagRefinements","getQueryParameter","parameterName","getRefinements","facetName","refinements","conjRefinements","getConjunctiveRefinements","r","push","type","excludeRefinements","getExcludeRefinements","disjRefinements","getDisjunctiveRefinements","numericRefinements","getNumericRefinement","getHierarchicalFacetBreadcrumb","mainQueries","states","queriesCount","length","helper","derivedQueries","derivedHelper","derivedState","getModifiedState","concat","queryId","_dispatchAlgoliaResponse","bind","_dispatchAlgoliaError","slice","s","specificResults","splice","formattedResponse","containsRefinement","facetFilters","numericFilters","tagFilters","_hasDisjunctiveRefinements","disjunctiveRefinements","clearCache","newClient","getClient","derive","fn","detachDerivedHelper","pos","indexOf","hasPendingRequests","currentAgent","_ua","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar DerivedHelper = require('./DerivedHelper');\nvar requestBuilder = require('./requestBuilder');\n\nvar events = require('events');\nvar inherits = require('./functions/inherits');\n\nvar flatten = require('lodash/flatten');\nvar forEach = require('lodash/forEach');\nvar isEmpty = require('lodash/isEmpty');\nvar map = require('lodash/map');\n\nvar url = require('./url');\nvar version = require('./version');\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {SearchParameters} state the current parameters with the latest changes applied\n * @property {SearchResults} lastResults the previous results received from Algolia. `null` before\n * the first request\n * @example\n * helper.on('change', function(state, lastResults) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {SearchParameters} state the parameters used for this search\n * @property {SearchResults} lastResults the results from the previous search. `null` if\n * it is the first search.\n * @example\n * helper.on('search', function(state, lastResults) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {SearchParameters} state the parameters used for this search\n * it is the first search.\n * @property {string} facet the facet searched into\n * @property {string} query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(state, facet, query) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {SearchParameters} state the parameters used for this search\n * it is the first search.\n * @example\n * helper.on('searchOnce', function(state) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {SearchResults} results the results received from Algolia\n * @property {SearchParameters} state the parameters used to query Algolia. Those might\n * be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(results, state) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {Error} error the error returned by the Algolia.\n * @example\n * helper.on('error', function(error) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (client.addAlgoliaAgent && !doesClientAgentContainsHelper(client)) {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\n\ninherits(AlgoliaSearchHelper, events.EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function() {\n  this._search();\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function() {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', tempState);\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function(err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(function(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  if (\n    !clientHasSFFV &&\n    typeof this.client.initIndex !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n\n  this._currentNbQueries++;\n  var self = this;\n\n  this.emit('searchForFacetValues', state, facet, query);\n  var searchForFacetValuesPromise = clientHasSFFV\n    ? this.client.searchForFacetValues([{indexName: state.index, params: algoliaQuery}])\n    : this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);\n\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n    content = Array.isArray(content) ? content[0] : content;\n\n    content.facetHits = forEach(content.facetHits, function(f) {\n      f.isRefined = isDisjunctive ?\n        state.isDisjunctiveFacetRefined(facet, f.value) :\n        state.isFacetRefined(facet, f.value);\n    });\n\n    return content;\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function(q) {\n  this._change(this.state.setPage(0).setQuery(q));\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n  this._change(this.state.setPage(0).clearRefinements(name));\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function() {\n  this._change(this.state.setPage(0).clearTags());\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n  this._change(this.state.setPage(0).addDisjunctiveFacetRefinement(facet, value));\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, value) {\n  this._change(this.state.setPage(0).addHierarchicalFacetRefinement(facet, value));\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n  this._change(this.state.setPage(0).addNumericRefinement(attribute, operator, value));\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n  this._change(this.state.setPage(0).addFacetRefinement(facet, value));\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function() {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n  this._change(this.state.setPage(0).addExcludeRefinement(facet, value));\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function() {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function(tag) {\n  this._change(this.state.setPage(0).addTagRefinement(tag));\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n  this._change(this.state.setPage(0).removeNumericRefinement(attribute, operator, value));\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n  this._change(this.state.setPage(0).removeDisjunctiveFacetRefinement(facet, value));\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n  this._change(this.state.setPage(0).removeHierarchicalFacetRefinement(facet));\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n  this._change(this.state.setPage(0).removeFacetRefinement(facet, value));\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function() {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n  this._change(this.state.setPage(0).removeExcludeRefinement(facet, value));\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function() {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function(tag) {\n  this._change(this.state.setPage(0).removeTagRefinement(tag));\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n  this._change(this.state.setPage(0).toggleExcludeFacetRefinement(facet, value));\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function() {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n  this._change(this.state.setPage(0).toggleFacetRefinement(facet, value));\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function() {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n  this._change(this.state.setPage(0).toggleTagRefinement(tag));\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function() {\n  return this.setPage(this.state.page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function() {\n  return this.setPage(this.state.page - 1);\n};\n\n/**\n * @private\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change(this.state.setPage(page));\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function(name) {\n  this._change(this.state.setPage(0).setIndex(name));\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n  this._change(this.state.setPage(0).setQueryParameter(parameter, value));\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function(newState) {\n  this._change(SearchParameters.make(newState));\n  return this;\n};\n\n/**\n * Get the current search state stored in the helper. This object is immutable.\n * @param {string[]} [filters] optional filters to retrieve only a subset of the state\n * @return {SearchParameters|object} if filters is specified a plain object is\n * returned containing only the requested fields, otherwise return the unfiltered\n * state\n * @example\n * // Get the complete state as stored in the helper\n * helper.getState();\n * @example\n * // Get a part of the state with all the refinements on attributes and the query\n * helper.getState(['query', 'attribute:category']);\n */\nAlgoliaSearchHelper.prototype.getState = function(filters) {\n  if (filters === undefined) return this.state;\n  return this.state.filter(filters);\n};\n\n/**\n * DEPRECATED Get part of the state as a query string. By default, the output keys will not\n * be prefixed and will only take the applied refinements and the query.\n * @deprecated\n * @param {object} [options] May contain the following parameters :\n *\n * **filters** : possible values are all the keys of the [SearchParameters](#searchparameters), `index` for\n * the index, all the refinements with `attribute:*` or for some specific attributes with\n * `attribute:theAttribute`\n *\n * **prefix** : prefix in front of the keys\n *\n * **moreAttributes** : more values to be added in the query string. Those values\n *    won't be prefixed.\n * @return {string} the query string\n */\nAlgoliaSearchHelper.prototype.getStateAsQueryString = function getStateAsQueryString(options) {\n  var filters = options && options.filters || ['query', 'attribute:*'];\n  var partialState = this.getState(filters);\n\n  return url.getQueryStringFromState(partialState, options);\n};\n\n/**\n * DEPRECATED Read a query string and return an object containing the state. Use\n * url module.\n * @deprecated\n * @static\n * @param {string} queryString the query string that will be decoded\n * @param {object} options accepted options :\n *   - prefix : the prefix used for the saved attributes, you have to provide the\n *     same that was used for serialization\n * @return {object} partial search parameters object (same properties than in the\n * SearchParameters but not exhaustive)\n * @see {@link url#getStateFromQueryString}\n */\nAlgoliaSearchHelper.getConfigurationFromQueryString = url.getStateFromQueryString;\n\n/**\n * DEPRECATED Retrieve an object of all the properties that are not understandable as helper\n * parameters. Use url module.\n * @deprecated\n * @static\n * @param {string} queryString the query string to read\n * @param {object} options the options\n *   - prefixForParameters : prefix used for the helper configuration keys\n * @return {object} the object containing the parsed configuration that doesn't\n * to the helper\n */\nAlgoliaSearchHelper.getForeignConfigurationInQueryString = url.getUnrecognizedParametersInQueryString;\n\n/**\n * DEPRECATED Overrides part of the state with the properties stored in the provided query\n * string.\n * @deprecated\n * @param {string} queryString the query string containing the informations to url the state\n * @param {object} options optional parameters :\n *  - prefix : prefix used for the algolia parameters\n *  - triggerChange : if set to true the state update will trigger a change event\n */\nAlgoliaSearchHelper.prototype.setStateFromQueryString = function(queryString, options) {\n  var triggerChange = options && options.triggerChange || false;\n  var configuration = url.getStateFromQueryString(queryString, options);\n  var updatedState = this.state.setQueryParameters(configuration);\n\n  if (triggerChange) this.setState(updatedState);\n  else this.overrideStateWithoutTriggeringChangeEvent(updatedState);\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isRefined = function(facet, value) {\n  if (this.state.isConjunctiveFacet(facet)) {\n    return this.state.isFacetRefined(facet, value);\n  } else if (this.state.isDisjunctiveFacet(facet)) {\n    return this.state.isDisjunctiveFacetRefined(facet, value);\n  }\n\n  throw new Error(facet +\n    ' is not properly defined in this helper configuration' +\n    '(use the facets or disjunctiveFacets keys to configure it)');\n};\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n  if (!isEmpty(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype.hasTag = function(tag) {\n  return this.state.isTagRefined(tag);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function() {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function() {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function() {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get a parameter of the search by its name. It is possible that a parameter is directly\n * defined in the index dashboard, but it will be undefined using this method.\n *\n * The complete list of parameters is\n * available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters have their own API)\n * @param {string} parameterName the parameter name\n * @return {any} the parameter value\n * @example\n * var hitsPerPage = helper.getQueryParameter('hitsPerPage');\n */\nAlgoliaSearchHelper.prototype.getQueryParameter = function(parameterName) {\n  return this.state.getQueryParameter(parameterName);\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    forEach(conjRefinements, function(r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    forEach(excludeRefinements, function(r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n\n    forEach(disjRefinements, function(r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  forEach(numericRefinements, function(value, operator) {\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function() {\n  var state = this.state;\n  var mainQueries = requestBuilder._getQueries(state.index, state);\n\n  var states = [{\n    state: state,\n    queriesCount: mainQueries.length,\n    helper: this\n  }];\n\n  this.emit('search', state, this.lastResults);\n\n  var derivedQueries = map(this.derivedHelpers, function(derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var queries = requestBuilder._getQueries(derivedState.index, derivedState);\n    states.push({\n      state: derivedState,\n      queriesCount: queries.length,\n      helper: derivedHelper\n    });\n    derivedHelper.emit('search', derivedState, derivedHelper.lastResults);\n    return queries;\n  });\n\n  var queries = mainQueries.concat(flatten(derivedQueries));\n  var queryId = this._queryId++;\n\n  this._currentNbQueries++;\n\n  try {\n    this.client.search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (err) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', err);\n  }\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= (queryId - this._lastQueryIdReceived);\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n  forEach(states, function(s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n    helper.emit('result', formattedResponse, state);\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, err) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', err);\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n  return query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0;\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n  return this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0;\n};\n\nAlgoliaSearchHelper.prototype._change = function(newState) {\n  if (newState !== this.state) {\n    this.state = newState;\n    this.emit('change', this.state, this.lastResults);\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.clearCache = function() {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.setClient = function(newClient) {\n  if (this.client === newClient) return this;\n\n  if (newClient.addAlgoliaAgent && !doesClientAgentContainsHelper(newClient)) {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\nAlgoliaSearchHelper.prototype.getClient = function() {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\nAlgoliaSearchHelper.prototype.derive = function(fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\n\n/*\n * This function tests if the _ua parameter of the client\n * already contains the JS Helper UA\n */\nfunction doesClientAgentContainsHelper(client) {\n  // this relies on JS Client internal variable, this might break if implementation changes\n  var currentAgent = client._ua;\n  return !currentAgent ? false :\n    currentAgent.indexOf('JS Helper') !== -1;\n}\n\nmodule.exports = AlgoliaSearchHelper;\n"]},"metadata":{},"sourceType":"script"}