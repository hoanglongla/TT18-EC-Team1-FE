{"ast":null,"code":"import { all, takeEvery, put, fork } from 'redux-saga/effects';\nimport { createBrowserHistory } from 'history';\nimport { getToken, clearToken } from '@iso/lib/helpers/utility';\nimport actions from './actions';\nconst history = createBrowserHistory();\nconst fakeApiCall = true; // auth0 or express JWT\n\nexport function* loginRequest() {\n  yield takeEvery('LOGIN_REQUEST', function* ({\n    payload\n  }) {\n    const {\n      token\n    } = payload;\n\n    if (token) {\n      yield put({\n        type: actions.LOGIN_SUCCESS,\n        token: token,\n        profile: 'Profile'\n      });\n    } else {\n      if (fakeApiCall) {\n        yield put({\n          type: actions.LOGIN_SUCCESS,\n          token: 'secret token',\n          profile: 'Profile'\n        });\n      } else {\n        yield put({\n          type: actions.LOGIN_ERROR\n        });\n      }\n    }\n  });\n}\nexport function* loginSuccess() {\n  yield takeEvery(actions.LOGIN_SUCCESS, function* (payload) {\n    yield localStorage.setItem('id_token', payload.token);\n  });\n}\nexport function* loginError() {\n  yield takeEvery(actions.LOGIN_ERROR, function* () {});\n}\nexport function* logout() {\n  yield takeEvery(actions.LOGOUT, function* () {\n    yield clearToken();\n    history.push('/');\n  });\n}\nexport function* checkAuthorization() {\n  yield takeEvery(actions.CHECK_AUTHORIZATION, function* () {\n    const token = getToken().get('idToken');\n\n    if (token) {\n      yield put({\n        type: actions.LOGIN_SUCCESS,\n        token,\n        profile: 'Profile'\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([fork(checkAuthorization), fork(loginRequest), fork(loginSuccess), fork(loginError), fork(logout)]);\n}","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/shared/isomorphic/redux/auth/saga.js"],"names":["all","takeEvery","put","fork","createBrowserHistory","getToken","clearToken","actions","history","fakeApiCall","loginRequest","payload","token","type","LOGIN_SUCCESS","profile","LOGIN_ERROR","loginSuccess","localStorage","setItem","loginError","logout","LOGOUT","push","checkAuthorization","CHECK_AUTHORIZATION","get","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,0BAArC;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,OAAO,GAAGJ,oBAAoB,EAApC;AACA,MAAMK,WAAW,GAAG,IAApB,C,CAA0B;;AAE1B,OAAO,UAAUC,YAAV,GAAyB;AAC9B,QAAMT,SAAS,CAAC,eAAD,EAAkB,WAAU;AAAEU,IAAAA;AAAF,GAAV,EAAuB;AACtD,UAAM;AAAEC,MAAAA;AAAF,QAAYD,OAAlB;;AACA,QAAIC,KAAJ,EAAW;AACT,YAAMV,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAEN,OAAO,CAACO,aADN;AAERF,QAAAA,KAAK,EAAEA,KAFC;AAGRG,QAAAA,OAAO,EAAE;AAHD,OAAD,CAAT;AAKD,KAND,MAMO;AACL,UAAIN,WAAJ,EAAiB;AACf,cAAMP,GAAG,CAAC;AACRW,UAAAA,IAAI,EAAEN,OAAO,CAACO,aADN;AAERF,UAAAA,KAAK,EAAE,cAFC;AAGRG,UAAAA,OAAO,EAAE;AAHD,SAAD,CAAT;AAKD,OAND,MAMO;AACL,cAAMb,GAAG,CAAC;AAAEW,UAAAA,IAAI,EAAEN,OAAO,CAACS;AAAhB,SAAD,CAAT;AACD;AACF;AACF,GAnBc,CAAf;AAoBD;AAED,OAAO,UAAUC,YAAV,GAAyB;AAC9B,QAAMhB,SAAS,CAACM,OAAO,CAACO,aAAT,EAAwB,WAAUH,OAAV,EAAmB;AACxD,UAAMO,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCR,OAAO,CAACC,KAAzC,CAAN;AACD,GAFc,CAAf;AAGD;AAED,OAAO,UAAUQ,UAAV,GAAuB;AAC5B,QAAMnB,SAAS,CAACM,OAAO,CAACS,WAAT,EAAsB,aAAY,CAAE,CAApC,CAAf;AACD;AAED,OAAO,UAAUK,MAAV,GAAmB;AACxB,QAAMpB,SAAS,CAACM,OAAO,CAACe,MAAT,EAAiB,aAAY;AAC1C,UAAMhB,UAAU,EAAhB;AACAE,IAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACD,GAHc,CAAf;AAID;AACD,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMvB,SAAS,CAACM,OAAO,CAACkB,mBAAT,EAA8B,aAAY;AACvD,UAAMb,KAAK,GAAGP,QAAQ,GAAGqB,GAAX,CAAe,SAAf,CAAd;;AACA,QAAId,KAAJ,EAAW;AACT,YAAMV,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAEN,OAAO,CAACO,aADN;AAERF,QAAAA,KAFQ;AAGRG,QAAAA,OAAO,EAAE;AAHD,OAAD,CAAT;AAKD;AACF,GATc,CAAf;AAUD;AACD,eAAe,UAAUY,QAAV,GAAqB;AAClC,QAAM3B,GAAG,CAAC,CACRG,IAAI,CAACqB,kBAAD,CADI,EAERrB,IAAI,CAACO,YAAD,CAFI,EAGRP,IAAI,CAACc,YAAD,CAHI,EAIRd,IAAI,CAACiB,UAAD,CAJI,EAKRjB,IAAI,CAACkB,MAAD,CALI,CAAD,CAAT;AAOD","sourcesContent":["import { all, takeEvery, put, fork } from 'redux-saga/effects';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport { getToken, clearToken } from '@iso/lib/helpers/utility';\r\nimport actions from './actions';\r\n\r\nconst history = createBrowserHistory();\r\nconst fakeApiCall = true; // auth0 or express JWT\r\n\r\nexport function* loginRequest() {\r\n  yield takeEvery('LOGIN_REQUEST', function*({ payload }) {\r\n    const { token } = payload;\r\n    if (token) {\r\n      yield put({\r\n        type: actions.LOGIN_SUCCESS,\r\n        token: token,\r\n        profile: 'Profile',\r\n      });\r\n    } else {\r\n      if (fakeApiCall) {\r\n        yield put({\r\n          type: actions.LOGIN_SUCCESS,\r\n          token: 'secret token',\r\n          profile: 'Profile',\r\n        });\r\n      } else {\r\n        yield put({ type: actions.LOGIN_ERROR });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function* loginSuccess() {\r\n  yield takeEvery(actions.LOGIN_SUCCESS, function*(payload) {\r\n    yield localStorage.setItem('id_token', payload.token);\r\n  });\r\n}\r\n\r\nexport function* loginError() {\r\n  yield takeEvery(actions.LOGIN_ERROR, function*() {});\r\n}\r\n\r\nexport function* logout() {\r\n  yield takeEvery(actions.LOGOUT, function*() {\r\n    yield clearToken();\r\n    history.push('/');\r\n  });\r\n}\r\nexport function* checkAuthorization() {\r\n  yield takeEvery(actions.CHECK_AUTHORIZATION, function*() {\r\n    const token = getToken().get('idToken');\r\n    if (token) {\r\n      yield put({\r\n        type: actions.LOGIN_SUCCESS,\r\n        token,\r\n        profile: 'Profile',\r\n      });\r\n    }\r\n  });\r\n}\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(checkAuthorization),\r\n    fork(loginRequest),\r\n    fork(loginSuccess),\r\n    fork(loginError),\r\n    fork(logout),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}