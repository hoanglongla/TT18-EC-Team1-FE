{"ast":null,"code":"// a little function to help us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nexport const reorderTasks = ({\n  columns,\n  source,\n  destination,\n  draggableId\n}) => {\n  const sourceColumn = columns[source.droppableId];\n  const sourceColumnTaskOrders = Array.from(columns[source.droppableId].task_orders);\n  const destinationColumn = columns[destination.droppableId];\n  const destinationColumnTaskOrders = Array.from(columns[destination.droppableId].task_orders); // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    sourceColumnTaskOrders.splice(source.index, 1);\n    sourceColumnTaskOrders.splice(destination.index, 0, draggableId);\n    const newColumns = { ...columns,\n      [source.droppableId]: { ...sourceColumn,\n        task_orders: sourceColumnTaskOrders\n      }\n    };\n    return newColumns;\n  } // moving to different list\n  // remove from original\n\n\n  sourceColumnTaskOrders.splice(source.index, 1); // insert into next\n\n  destinationColumnTaskOrders.splice(destination.index, 0, draggableId);\n  const newColumns = { ...columns,\n    [source.droppableId]: { ...sourceColumn,\n      task_orders: sourceColumnTaskOrders\n    },\n    [destination.droppableId]: { ...destinationColumn,\n      task_orders: destinationColumnTaskOrders\n    }\n  };\n  return newColumns;\n};","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/shared/common/library/helpers/reorder.js"],"names":["reorder","list","startIndex","endIndex","result","Array","from","removed","splice","reorderTasks","columns","source","destination","draggableId","sourceColumn","droppableId","sourceColumnTaskOrders","task_orders","destinationColumn","destinationColumnTaskOrders","index","newColumns"],"mappings":"AAAA;AACA,OAAO,MAAMA,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AACrD,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;AACA,QAAM,CAACM,OAAD,IAAYH,MAAM,CAACI,MAAP,CAAcN,UAAd,EAA0B,CAA1B,CAAlB;AACAE,EAAAA,MAAM,CAACI,MAAP,CAAcL,QAAd,EAAwB,CAAxB,EAA2BI,OAA3B;AAEA,SAAOH,MAAP;AACD,CANM;AAQP,OAAO,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA,WAAnB;AAAgCC,EAAAA;AAAhC,CAAD,KAAmD;AAC7E,QAAMC,YAAY,GAAGJ,OAAO,CAACC,MAAM,CAACI,WAAR,CAA5B;AACA,QAAMC,sBAAsB,GAAGX,KAAK,CAACC,IAAN,CAC7BI,OAAO,CAACC,MAAM,CAACI,WAAR,CAAP,CAA4BE,WADC,CAA/B;AAGA,QAAMC,iBAAiB,GAAGR,OAAO,CAACE,WAAW,CAACG,WAAb,CAAjC;AACA,QAAMI,2BAA2B,GAAGd,KAAK,CAACC,IAAN,CAClCI,OAAO,CAACE,WAAW,CAACG,WAAb,CAAP,CAAiCE,WADC,CAApC,CAN6E,CAS7E;;AACA,MAAIN,MAAM,CAACI,WAAP,KAAuBH,WAAW,CAACG,WAAvC,EAAoD;AAClDC,IAAAA,sBAAsB,CAACR,MAAvB,CAA8BG,MAAM,CAACS,KAArC,EAA4C,CAA5C;AACAJ,IAAAA,sBAAsB,CAACR,MAAvB,CAA8BI,WAAW,CAACQ,KAA1C,EAAiD,CAAjD,EAAoDP,WAApD;AAEA,UAAMQ,UAAU,GAAG,EACjB,GAAGX,OADc;AAEjB,OAACC,MAAM,CAACI,WAAR,GAAsB,EACpB,GAAGD,YADiB;AAEpBG,QAAAA,WAAW,EAAED;AAFO;AAFL,KAAnB;AAOA,WAAOK,UAAP;AACD,GAtB4E,CAwB7E;AAEA;;;AACAL,EAAAA,sBAAsB,CAACR,MAAvB,CAA8BG,MAAM,CAACS,KAArC,EAA4C,CAA5C,EA3B6E,CA4B7E;;AACAD,EAAAA,2BAA2B,CAACX,MAA5B,CAAmCI,WAAW,CAACQ,KAA/C,EAAsD,CAAtD,EAAyDP,WAAzD;AAEA,QAAMQ,UAAU,GAAG,EACjB,GAAGX,OADc;AAEjB,KAACC,MAAM,CAACI,WAAR,GAAsB,EACpB,GAAGD,YADiB;AAEpBG,MAAAA,WAAW,EAAED;AAFO,KAFL;AAMjB,KAACJ,WAAW,CAACG,WAAb,GAA2B,EACzB,GAAGG,iBADsB;AAEzBD,MAAAA,WAAW,EAAEE;AAFY;AANV,GAAnB;AAYA,SAAOE,UAAP;AACD,CA5CM","sourcesContent":["// a little function to help us with reordering the result\r\nexport const reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nexport const reorderTasks = ({ columns, source, destination, draggableId }) => {\r\n  const sourceColumn = columns[source.droppableId];\r\n  const sourceColumnTaskOrders = Array.from(\r\n    columns[source.droppableId].task_orders\r\n  );\r\n  const destinationColumn = columns[destination.droppableId];\r\n  const destinationColumnTaskOrders = Array.from(\r\n    columns[destination.droppableId].task_orders\r\n  );\r\n  // moving to same list\r\n  if (source.droppableId === destination.droppableId) {\r\n    sourceColumnTaskOrders.splice(source.index, 1);\r\n    sourceColumnTaskOrders.splice(destination.index, 0, draggableId);\r\n\r\n    const newColumns = {\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        task_orders: sourceColumnTaskOrders,\r\n      },\r\n    };\r\n    return newColumns;\r\n  }\r\n\r\n  // moving to different list\r\n\r\n  // remove from original\r\n  sourceColumnTaskOrders.splice(source.index, 1);\r\n  // insert into next\r\n  destinationColumnTaskOrders.splice(destination.index, 0, draggableId);\r\n\r\n  const newColumns = {\r\n    ...columns,\r\n    [source.droppableId]: {\r\n      ...sourceColumn,\r\n      task_orders: sourceColumnTaskOrders,\r\n    },\r\n    [destination.droppableId]: {\r\n      ...destinationColumn,\r\n      task_orders: destinationColumnTaskOrders,\r\n    },\r\n  };\r\n\r\n  return newColumns;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}