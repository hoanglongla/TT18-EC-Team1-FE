{"ast":null,"code":"import \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"D:\\\\Team6-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\containers\\\\Forms\\\\FormsWithValidation\\\\FormValidation.js\";\nimport React from 'react';\nimport Form from '@iso/components/uielements/form';\nimport Checkbox from '@iso/components/uielements/checkbox';\nimport Button from '@iso/components/uielements/button';\nimport Notification from '@iso/components/Notification';\nconst FormItem = Form.Item;\n\nfunction FormWIthSubmissionButton(props) {\n  const [confirmDirty, setConfirmDirty] = React.useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        Notification('success', 'Received values of form', JSON.stringify(values));\n      }\n    });\n  };\n\n  const handleConfirmBlur = e => {\n    const value = e.target.value;\n    setConfirmDirty(confirmDirty => confirmDirty || !!value);\n  };\n\n  const checkPassword = (rule, value, callback) => {\n    const form = props.form;\n\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  const checkConfirm = (rule, value, callback) => {\n    const form = props.form;\n\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], {\n        force: true\n      });\n    }\n\n    callback();\n  };\n\n  const {\n    getFieldDecorator\n  } = props.form;\n  const formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 6\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 14\n      }\n    }\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0\n      },\n      sm: {\n        span: 14,\n        offset: 6\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormItem, Object.assign({}, formItemLayout, {\n    label: \"E-mail\",\n    hasFeedback: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), getFieldDecorator('email', {\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }]\n  })( /*#__PURE__*/React.createElement(_Input, {\n    name: \"email\",\n    id: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }\n  }))), /*#__PURE__*/React.createElement(FormItem, Object.assign({}, formItemLayout, {\n    label: \"Password\",\n    hasFeedback: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), getFieldDecorator('password', {\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }, {\n      validator: checkConfirm\n    }]\n  })( /*#__PURE__*/React.createElement(_Input, {\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }\n  }))), /*#__PURE__*/React.createElement(FormItem, Object.assign({}, formItemLayout, {\n    label: \"Confirm Password\",\n    hasFeedback: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), getFieldDecorator('confirm', {\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, {\n      validator: checkPassword\n    }]\n  })( /*#__PURE__*/React.createElement(_Input, {\n    type: \"password\",\n    onBlur: handleConfirmBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }\n  }))), /*#__PURE__*/React.createElement(FormItem, Object.assign({}, tailFormItemLayout, {\n    style: {\n      marginBottom: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), getFieldDecorator('agreement', {\n    valuePropName: 'checked',\n    rules: [{\n      message: 'Please input your E-mail!',\n      required: true\n    }]\n  })( /*#__PURE__*/React.createElement(Checkbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"I have read the \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"# \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  }, \"agreement\")))), /*#__PURE__*/React.createElement(FormItem, Object.assign({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"Register\")));\n}\n\nconst WrappedFormWIthSubmissionButton = Form.create()(FormWIthSubmissionButton);\nexport default WrappedFormWIthSubmissionButton;","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/shared/isomorphic/containers/Forms/FormsWithValidation/FormValidation.js"],"names":["React","Form","Checkbox","Button","Notification","FormItem","Item","FormWIthSubmissionButton","props","confirmDirty","setConfirmDirty","useState","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","JSON","stringify","handleConfirmBlur","value","target","checkPassword","rule","callback","getFieldValue","checkConfirm","validateFields","force","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","type","message","required","validator","marginBottom","valuePropName","WrappedFormWIthSubmissionButton","create"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,MAAMC,QAAQ,GAAGJ,IAAI,CAACK,IAAtB;;AAEA,SAASC,wBAAT,CAAkCC,KAAlC,EAAyC;AACvC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,KAAK,CAACW,QAAN,CAAe,KAAf,CAAxC;;AAEA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACAN,IAAAA,KAAK,CAACO,IAAN,CAAWC,uBAAX,CAAmC,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAClD,UAAI,CAACD,GAAL,EAAU;AACRb,QAAAA,YAAY,CACV,SADU,EAEV,yBAFU,EAGVe,IAAI,CAACC,SAAL,CAAeF,MAAf,CAHU,CAAZ;AAKD;AACF,KARD;AASD,GAXD;;AAYA,QAAMG,iBAAiB,GAAGR,CAAC,IAAI;AAC7B,UAAMS,KAAK,GAAGT,CAAC,CAACU,MAAF,CAASD,KAAvB;AACAZ,IAAAA,eAAe,CAACD,YAAY,IAAIA,YAAY,IAAI,CAAC,CAACa,KAAnC,CAAf;AACD,GAHD;;AAIA,QAAME,aAAa,GAAG,CAACC,IAAD,EAAOH,KAAP,EAAcI,QAAd,KAA2B;AAC/C,UAAMX,IAAI,GAAGP,KAAK,CAACO,IAAnB;;AACA,QAAIO,KAAK,IAAIA,KAAK,KAAKP,IAAI,CAACY,aAAL,CAAmB,UAAnB,CAAvB,EAAuD;AACrDD,MAAAA,QAAQ,CAAC,+CAAD,CAAR;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ;AACT;AACF,GAPD;;AAQA,QAAME,YAAY,GAAG,CAACH,IAAD,EAAOH,KAAP,EAAcI,QAAd,KAA2B;AAC9C,UAAMX,IAAI,GAAGP,KAAK,CAACO,IAAnB;;AACA,QAAIO,KAAK,IAAIb,YAAb,EAA2B;AACzBM,MAAAA,IAAI,CAACc,cAAL,CAAoB,CAAC,SAAD,CAApB,EAAiC;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAjC;AACD;;AACDJ,IAAAA,QAAQ;AACT,GAND;;AAQA,QAAM;AAAEK,IAAAA;AAAF,MAAwBvB,KAAK,CAACO,IAApC;AAEA,QAAMiB,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,EAAE,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADI;AAERC,MAAAA,EAAE,EAAE;AAAED,QAAAA,IAAI,EAAE;AAAR;AAFI,KADW;AAKrBE,IAAAA,UAAU,EAAE;AACVH,MAAAA,EAAE,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADM;AAEVC,MAAAA,EAAE,EAAE;AAAED,QAAAA,IAAI,EAAE;AAAR;AAFM;AALS,GAAvB;AAUA,QAAMG,kBAAkB,GAAG;AACzBD,IAAAA,UAAU,EAAE;AACVH,MAAAA,EAAE,EAAE;AACFC,QAAAA,IAAI,EAAE,EADJ;AAEFI,QAAAA,MAAM,EAAE;AAFN,OADM;AAKVH,MAAAA,EAAE,EAAE;AACFD,QAAAA,IAAI,EAAE,EADJ;AAEFI,QAAAA,MAAM,EAAE;AAFN;AALM;AADa,GAA3B;AAYA,sBACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAE3B,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD,oBAAcoB,cAAd;AAA8B,IAAA,KAAK,EAAC,QAApC;AAA6C,IAAA,WAAW,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,iBAAiB,CAAC,OAAD,EAAU;AAC1BS,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,OAAO,EAAE;AAFX,KADK,EAKL;AACEC,MAAAA,QAAQ,EAAE,IADZ;AAEED,MAAAA,OAAO,EAAE;AAFX,KALK;AADmB,GAAV,CAAjB,eAWE;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,EAAE,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADH,CADF,eAeE,oBAAC,QAAD,oBAAcV,cAAd;AAA8B,IAAA,KAAK,EAAC,UAApC;AAA+C,IAAA,WAAW,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,iBAAiB,CAAC,UAAD,EAAa;AAC7BS,IAAAA,KAAK,EAAE,CACL;AACEG,MAAAA,QAAQ,EAAE,IADZ;AAEED,MAAAA,OAAO,EAAE;AAFX,KADK,EAKL;AACEE,MAAAA,SAAS,EAAEhB;AADb,KALK;AADsB,GAAb,CAAjB,eAUE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADH,CAfF,eA4BE,oBAAC,QAAD,oBAAcI,cAAd;AAA8B,IAAA,KAAK,EAAC,kBAApC;AAAuD,IAAA,WAAW,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,iBAAiB,CAAC,SAAD,EAAY;AAC5BS,IAAAA,KAAK,EAAE,CACL;AACEG,MAAAA,QAAQ,EAAE,IADZ;AAEED,MAAAA,OAAO,EAAE;AAFX,KADK,EAKL;AACEE,MAAAA,SAAS,EAAEpB;AADb,KALK;AADqB,GAAZ,CAAjB,eAUE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,MAAM,EAAEH,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADH,CA5BF,eAyCE,oBAAC,QAAD,oBAAciB,kBAAd;AAAkC,IAAA,KAAK,EAAE;AAAEO,MAAAA,YAAY,EAAE;AAAhB,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGd,iBAAiB,CAAC,WAAD,EAAc;AAC9Be,IAAAA,aAAa,EAAE,SADe;AAE9BN,IAAAA,KAAK,EAAE,CACL;AACEE,MAAAA,OAAO,EAAE,2BADX;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KADK;AAFuB,GAAd,CAAjB,eASC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACkB;AAAG,IAAA,IAAI,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADlB,CATD,CADH,CAzCF,eAwDE,oBAAC,QAAD,oBAAcL,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAxDF,CADF;AAgED;;AAED,MAAMS,+BAA+B,GAAG9C,IAAI,CAAC+C,MAAL,GAAczC,wBAAd,CAAxC;AACA,eAAewC,+BAAf","sourcesContent":["import React from 'react';\r\nimport { Input } from 'antd';\r\nimport Form from '@iso/components/uielements/form';\r\nimport Checkbox from '@iso/components/uielements/checkbox';\r\nimport Button from '@iso/components/uielements/button';\r\nimport Notification from '@iso/components/Notification';\r\nconst FormItem = Form.Item;\r\n\r\nfunction FormWIthSubmissionButton(props) {\r\n  const [confirmDirty, setConfirmDirty] = React.useState(false);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        Notification(\r\n          'success',\r\n          'Received values of form',\r\n          JSON.stringify(values)\r\n        );\r\n      }\r\n    });\r\n  };\r\n  const handleConfirmBlur = e => {\r\n    const value = e.target.value;\r\n    setConfirmDirty(confirmDirty => confirmDirty || !!value);\r\n  };\r\n  const checkPassword = (rule, value, callback) => {\r\n    const form = props.form;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n  const checkConfirm = (rule, value, callback) => {\r\n    const form = props.form;\r\n    if (value && confirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  const { getFieldDecorator } = props.form;\r\n\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 6 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 14 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 14,\r\n        offset: 6,\r\n      },\r\n    },\r\n  };\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <FormItem {...formItemLayout} label=\"E-mail\" hasFeedback>\r\n        {getFieldDecorator('email', {\r\n          rules: [\r\n            {\r\n              type: 'email',\r\n              message: 'The input is not valid E-mail!',\r\n            },\r\n            {\r\n              required: true,\r\n              message: 'Please input your E-mail!',\r\n            },\r\n          ],\r\n        })(<Input name=\"email\" id=\"email\" />)}\r\n      </FormItem>\r\n      <FormItem {...formItemLayout} label=\"Password\" hasFeedback>\r\n        {getFieldDecorator('password', {\r\n          rules: [\r\n            {\r\n              required: true,\r\n              message: 'Please input your password!',\r\n            },\r\n            {\r\n              validator: checkConfirm,\r\n            },\r\n          ],\r\n        })(<Input type=\"password\" />)}\r\n      </FormItem>\r\n      <FormItem {...formItemLayout} label=\"Confirm Password\" hasFeedback>\r\n        {getFieldDecorator('confirm', {\r\n          rules: [\r\n            {\r\n              required: true,\r\n              message: 'Please confirm your password!',\r\n            },\r\n            {\r\n              validator: checkPassword,\r\n            },\r\n          ],\r\n        })(<Input type=\"password\" onBlur={handleConfirmBlur} />)}\r\n      </FormItem>\r\n      <FormItem {...tailFormItemLayout} style={{ marginBottom: 8 }}>\r\n        {getFieldDecorator('agreement', {\r\n          valuePropName: 'checked',\r\n          rules: [\r\n            {\r\n              message: 'Please input your E-mail!',\r\n              required: true,\r\n            },\r\n          ],\r\n        })(\r\n          <Checkbox>\r\n            I have read the <a href=\"# \">agreement</a>\r\n          </Checkbox>\r\n        )}\r\n      </FormItem>\r\n      <FormItem {...tailFormItemLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Register\r\n        </Button>\r\n      </FormItem>\r\n    </Form>\r\n  );\r\n}\r\n\r\nconst WrappedFormWIthSubmissionButton = Form.create()(FormWIthSubmissionButton);\r\nexport default WrappedFormWIthSubmissionButton;\r\n"]},"metadata":{},"sourceType":"module"}