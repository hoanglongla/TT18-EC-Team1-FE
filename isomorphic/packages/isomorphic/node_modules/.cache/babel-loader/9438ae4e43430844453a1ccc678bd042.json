{"ast":null,"code":"var _jsxFileName = \"D:\\\\Team6-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\components\\\\Contacts\\\\ContactList.js\";\nimport React, { Component } from 'react';\nimport IntlMessages from '../utility/intlMessages';\nimport { InputSearch } from '../uielements/input';\nimport DeleteButton from './DeleteButton';\nimport { PropTypes } from 'prop-types';\nimport { ContactListWrapper } from './ContactList.style';\nimport Scrollbar from '../utility/customScrollBar';\n\nfunction filterContacts(contacts, search) {\n  search = search.toUpperCase();\n  return search ? contacts.filter(contact => contact.name.toUpperCase().includes(search)) : contacts;\n}\n\nexport default class ContactList extends Component {\n  constructor(props) {\n    super(props);\n    this.singleContact = this.singleContact.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.state = {\n      search: ''\n    };\n  }\n\n  singleContact(contact) {\n    const {\n      seectedId,\n      deleteContact,\n      changeContact\n    } = this.props;\n    const activeClass = seectedId === contact.id ? 'active' : '';\n\n    const onChange = () => changeContact(contact.id);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: contact.id,\n      className: `${activeClass} isoSingleContact`,\n      onClick: onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"isoAvatar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, contact.avatar ? /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"#\",\n      src: contact.avatar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 29\n      }\n    }) : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"isoContactName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, contact.name ? contact.name : 'No Name')), /*#__PURE__*/React.createElement(DeleteButton, {\n      deleteContact: deleteContact,\n      contact: contact,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  onChange(event) {\n    this.setState({\n      search: event.target.value\n    });\n  }\n\n  render() {\n    const {\n      search\n    } = this.state;\n    const contacts = filterContacts(this.props.contacts, search);\n    return /*#__PURE__*/React.createElement(ContactListWrapper, {\n      className: \"isoContactListWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InputSearch, {\n      placeholder: this.context.intl.formatMessage({\n        id: 'contactlist.searchContacts'\n      }),\n      value: search,\n      onChange: this.onChange,\n      className: \"isoSearchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }), contacts && contacts.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"isoContactList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Scrollbar, {\n      className: \"contactListScrollbar\",\n      style: {\n        height: 'calc(100vh - 200px)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, contacts.map(contact => this.singleContact(contact)))) : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"isoNoResultMsg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"Component.contacts.noOption\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }\n    })));\n  }\n\n}\nContactList.contextTypes = {\n  intl: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/shared/isomorphic/components/Contacts/ContactList.js"],"names":["React","Component","IntlMessages","InputSearch","DeleteButton","PropTypes","ContactListWrapper","Scrollbar","filterContacts","contacts","search","toUpperCase","filter","contact","name","includes","ContactList","constructor","props","singleContact","bind","onChange","state","seectedId","deleteContact","changeContact","activeClass","id","avatar","event","setState","target","value","render","context","intl","formatMessage","length","height","map","contextTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport IntlMessages from '../utility/intlMessages';\r\nimport { InputSearch } from '../uielements/input';\r\nimport DeleteButton from './DeleteButton';\r\nimport { PropTypes } from 'prop-types';\r\nimport { ContactListWrapper } from './ContactList.style';\r\nimport Scrollbar from '../utility/customScrollBar';\r\n\r\nfunction filterContacts(contacts, search) {\r\n  search = search.toUpperCase();\r\n  return search\r\n    ? contacts.filter(contact => contact.name.toUpperCase().includes(search))\r\n    : contacts;\r\n}\r\n\r\nexport default class ContactList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.singleContact = this.singleContact.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.state = {\r\n      search: '',\r\n    };\r\n  }\r\n  singleContact(contact) {\r\n    const { seectedId, deleteContact, changeContact } = this.props;\r\n    const activeClass = seectedId === contact.id ? 'active' : '';\r\n    const onChange = () => changeContact(contact.id);\r\n    return (\r\n      <div\r\n        key={contact.id}\r\n        className={`${activeClass} isoSingleContact`}\r\n        onClick={onChange}\r\n      >\r\n        <div className=\"isoAvatar\">\r\n          {contact.avatar ? <img alt=\"#\" src={contact.avatar} /> : ''}\r\n        </div>\r\n        <div className=\"isoContactName\">\r\n          <h3>{contact.name ? contact.name : 'No Name'}</h3>\r\n        </div>\r\n        <DeleteButton deleteContact={deleteContact} contact={contact} />\r\n      </div>\r\n    );\r\n  }\r\n  onChange(event) {\r\n    this.setState({ search: event.target.value });\r\n  }\r\n  render() {\r\n    const { search } = this.state;\r\n    const contacts = filterContacts(this.props.contacts, search);\r\n    return (\r\n      <ContactListWrapper className=\"isoContactListWrapper\">\r\n        <InputSearch\r\n          placeholder={this.context.intl.formatMessage({\r\n            id: 'contactlist.searchContacts',\r\n          })}\r\n          value={search}\r\n          onChange={this.onChange}\r\n          className=\"isoSearchBar\"\r\n        />\r\n        {contacts && contacts.length > 0 ? (\r\n          <div className=\"isoContactList\">\r\n            <Scrollbar\r\n              className=\"contactListScrollbar\"\r\n              style={{ height: 'calc(100vh - 200px)' }}\r\n            >\r\n              {contacts.map(contact => this.singleContact(contact))}\r\n            </Scrollbar>\r\n          </div>\r\n        ) : (\r\n          <span className=\"isoNoResultMsg\">\r\n            {<IntlMessages id=\"Component.contacts.noOption\" />}\r\n          </span>\r\n        )}\r\n      </ContactListWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.contextTypes = {\r\n  intl: PropTypes.object.isRequired,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}