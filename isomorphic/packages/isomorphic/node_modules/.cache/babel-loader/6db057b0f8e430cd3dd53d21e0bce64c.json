{"ast":null,"code":"var _jsxFileName = \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\containers\\\\ScrumBoard\\\\Task\\\\Task.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport drawerActions from '@iso/redux/drawer/actions';\nimport { Container } from './Task.style';\nimport TaskCard from './TaskCard/TaskCard';\n\nclass TaskItem extends React.PureComponent {\n  render() {\n    const {\n      task,\n      isDragging,\n      isGroupedOver,\n      provided,\n      columnId,\n      deleteTaskWatcher,\n      openDrawer,\n      closeDrawer\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Container, Object.assign({\n      isDragging: isDragging,\n      isGroupedOver: isGroupedOver,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(TaskCard, {\n      task: task,\n      showDrawer: () => openDrawer({\n        drawerType: 'CARD_DETAILS',\n        drawerProps: {\n          task: task,\n          columnId: columnId\n        }\n      }),\n      onDelete: () => {\n        deleteTaskWatcher({\n          task_id: task.id,\n          column_id: columnId\n        });\n        closeDrawer();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default connect(null, { ...scrumBoardActions,\n  ...drawerActions\n})(TaskItem);","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/shared/isomorphic/containers/ScrumBoard/Task/Task.js"],"names":["React","connect","scrumBoardActions","drawerActions","Container","TaskCard","TaskItem","PureComponent","render","task","isDragging","isGroupedOver","provided","columnId","deleteTaskWatcher","openDrawer","closeDrawer","props","innerRef","draggableProps","dragHandleProps","drawerType","drawerProps","task_id","id","column_id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,aAA7B,CAA2C;AACzCC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,IADI;AAEJC,MAAAA,UAFI;AAGJC,MAAAA,aAHI;AAIJC,MAAAA,QAJI;AAKJC,MAAAA,QALI;AAMJC,MAAAA,iBANI;AAOJC,MAAAA,UAPI;AAQJC,MAAAA;AARI,QASF,KAAKC,KATT;AAWA,wBACE,oBAAC,SAAD;AACE,MAAA,UAAU,EAAEP,UADd;AAEE,MAAA,aAAa,EAAEC,aAFjB;AAGE,MAAA,GAAG,EAAEC,QAAQ,CAACM;AAHhB,OAIMN,QAAQ,CAACO,cAJf,EAKMP,QAAQ,CAACQ,eALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAOE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEX,IADR;AAEE,MAAA,UAAU,EAAE,MACVM,UAAU,CAAC;AACTM,QAAAA,UAAU,EAAE,cADH;AAETC,QAAAA,WAAW,EAAE;AACXb,UAAAA,IAAI,EAAEA,IADK;AAEXI,UAAAA,QAAQ,EAAEA;AAFC;AAFJ,OAAD,CAHd;AAWE,MAAA,QAAQ,EAAE,MAAM;AACdC,QAAAA,iBAAiB,CAAC;AAAES,UAAAA,OAAO,EAAEd,IAAI,CAACe,EAAhB;AAAoBC,UAAAA,SAAS,EAAEZ;AAA/B,SAAD,CAAjB;AACAG,QAAAA,WAAW;AACZ,OAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AA0BD;;AAvCwC;;AA0C3C,eAAef,OAAO,CACpB,IADoB,EAEpB,EAAE,GAAGC,iBAAL;AAAwB,KAAGC;AAA3B,CAFoB,CAAP,CAGbG,QAHa,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\r\nimport drawerActions from '@iso/redux/drawer/actions';\r\nimport { Container } from './Task.style';\r\nimport TaskCard from './TaskCard/TaskCard';\r\n\r\nclass TaskItem extends React.PureComponent {\r\n  render() {\r\n    const {\r\n      task,\r\n      isDragging,\r\n      isGroupedOver,\r\n      provided,\r\n      columnId,\r\n      deleteTaskWatcher,\r\n      openDrawer,\r\n      closeDrawer,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Container\r\n        isDragging={isDragging}\r\n        isGroupedOver={isGroupedOver}\r\n        ref={provided.innerRef}\r\n        {...provided.draggableProps}\r\n        {...provided.dragHandleProps}\r\n      >\r\n        <TaskCard\r\n          task={task}\r\n          showDrawer={() =>\r\n            openDrawer({\r\n              drawerType: 'CARD_DETAILS',\r\n              drawerProps: {\r\n                task: task,\r\n                columnId: columnId,\r\n              },\r\n            })\r\n          }\r\n          onDelete={() => {\r\n            deleteTaskWatcher({ task_id: task.id, column_id: columnId });\r\n            closeDrawer();\r\n          }}\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { ...scrumBoardActions, ...drawerActions }\r\n)(TaskItem);\r\n"]},"metadata":{},"sourceType":"module"}