{"ast":null,"code":"/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nmodule.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {\n  var onSuccess = _ref.onSuccess;\n  directoryReader.readEntries(function (entries) {\n    var newEntries = [].concat(oldEntries, entries); // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory() must be called until it calls the onSuccess with an empty array.\n\n    if (entries.length) {\n      setTimeout(function () {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess: onSuccess\n        });\n      }, 0); // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  }, // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  function (error) {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n};","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/node_modules/@uppy/utils/lib/getDroppedFiles/utils/webkitGetAsEntryApi/getFilesAndDirectoriesFromDirectory.js"],"names":["module","exports","getFilesAndDirectoriesFromDirectory","directoryReader","oldEntries","logDropError","_ref","onSuccess","readEntries","entries","newEntries","concat","length","setTimeout","error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,mCAAT,CAA6CC,eAA7C,EAA8DC,UAA9D,EAA0EC,YAA1E,EAAwFC,IAAxF,EAA8F;AAC7G,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AACAJ,EAAAA,eAAe,CAACK,WAAhB,CAA4B,UAAUC,OAAV,EAAmB;AAC7C,QAAIC,UAAU,GAAG,GAAGC,MAAH,CAAUP,UAAV,EAAsBK,OAAtB,CAAjB,CAD6C,CACI;;AAEjD,QAAIA,OAAO,CAACG,MAAZ,EAAoB;AAClBC,MAAAA,UAAU,CAAC,YAAY;AACrBX,QAAAA,mCAAmC,CAACC,eAAD,EAAkBO,UAAlB,EAA8BL,YAA9B,EAA4C;AAC7EE,UAAAA,SAAS,EAAEA;AADkE,SAA5C,CAAnC;AAGD,OAJS,EAIP,CAJO,CAAV,CADkB,CAKX;AACR,KAND,MAMO;AACLA,MAAAA,SAAS,CAACG,UAAD,CAAT;AACD;AACF,GAZD,EAYG;AACH,YAAUI,KAAV,EAAiB;AACfT,IAAAA,YAAY,CAACS,KAAD,CAAZ;AACAP,IAAAA,SAAS,CAACH,UAAD,CAAT;AACD,GAhBD;AAiBD,CAnBD","sourcesContent":["/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nmodule.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {\n  var onSuccess = _ref.onSuccess;\n  directoryReader.readEntries(function (entries) {\n    var newEntries = [].concat(oldEntries, entries); // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory() must be called until it calls the onSuccess with an empty array.\n\n    if (entries.length) {\n      setTimeout(function () {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess: onSuccess\n        });\n      }, 0); // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  }, // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  function (error) {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n};"]},"metadata":{},"sourceType":"script"}