{"ast":null,"code":"var _jsxFileName = \"D:\\\\TT18-EC-Team1-FE\\\\isomorphic\\\\shared\\\\isomorphic\\\\containers\\\\BookingManagement\\\\configs.js\";\nimport React from 'react';\nimport clone from 'clone';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport { DateCell, ImageCell, LinkCell, TextCell } from '@iso/components/Tables/HelperCells';\n\nconst renderCell = (object, type, key) => {\n  const value = object[key];\n\n  switch (type) {\n    case 'ImageCell':\n      return ImageCell(value);\n\n    case 'DateCell':\n      return DateCell(value);\n\n    case 'LinkCell':\n      return LinkCell(value);\n\n    default:\n      return TextCell(value);\n  }\n};\n\nconst columns = [{\n  title: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"antTable.title.image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }\n  }),\n  key: 'avatar',\n  width: '1%',\n  className: 'isoImageCell',\n  render: object => renderCell(object, 'ImageCell', 'avatar')\n}, {\n  title: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"T\\xEAn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }\n  }),\n  key: 'firstName',\n  width: 100,\n  render: object => renderCell(object, 'TextCell', 'firstName')\n}, {\n  title: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"Gi\\xE1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }\n  }),\n  key: 'lastName',\n  width: 100,\n  render: object => renderCell(object, 'TextCell', 'lastName')\n}, {\n  title: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"Gi\\xE1 \\u01B0u \\u0111\\xE3i\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }\n  }),\n  key: 'city',\n  width: 200,\n  render: object => renderCell(object, 'TextCell', 'city')\n}, {\n  title: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"D\\xE0nh cho\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }\n  }),\n  key: 'email',\n  width: 200,\n  render: object => renderCell(object, 'LinkCell', 'email')\n}, {\n  title: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"Th\\u1EDDi gian th\\u1EF1c hi\\u1EC7n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }\n  }),\n  key: 'street',\n  width: 200,\n  render: object => renderCell(object, 'TextCell', 'street')\n}, {\n  title: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"Danh m\\u1EE5c\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }\n  }),\n  key: 'date',\n  width: 200,\n  render: object => renderCell(object, 'DateCell', 'date')\n}];\nconst smallColumns = [columns[1], columns[2], columns[3], columns[4], columns[5], columns[6]];\nconst sortColumns = [{ ...columns[1],\n  sorter: true\n}, { ...columns[2],\n  sorter: true\n}, { ...columns[3],\n  sorter: true\n}, { ...columns[4],\n  sorter: true\n}];\nconst editColumns = [{ ...columns[1],\n  width: 300\n}, { ...columns[2],\n  width: 300\n}, columns[3], columns[4]];\nconst groupColumns = [columns[0], {\n  title: 'Name',\n  children: [columns[1], columns[2]]\n}, {\n  title: 'Address',\n  children: [columns[3], columns[4]]\n}];\nconst tableinfos = [{\n  title: 'Lịch hẹn đang chờ',\n  value: 'all_booking',\n  columns: clone(smallColumns)\n}, {\n  title: 'Lịch hẹn đang làm',\n  value: 'success_booking',\n  columns: clone(smallColumns)\n}, {\n  title: 'Lịch hẹn dang',\n  value: 'wait_booking',\n  columns: clone(smallColumns)\n}];\nexport { columns, tableinfos };","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/shared/isomorphic/containers/BookingManagement/configs.js"],"names":["React","clone","IntlMessages","DateCell","ImageCell","LinkCell","TextCell","renderCell","object","type","key","value","columns","title","width","className","render","smallColumns","sortColumns","sorter","editColumns","groupColumns","children","tableinfos"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport clone from 'clone';\r\nimport IntlMessages from '@iso/components/utility/intlMessages';\r\nimport {\r\n  DateCell,\r\n  ImageCell,\r\n  LinkCell,\r\n  TextCell,\r\n} from '@iso/components/Tables/HelperCells';\r\n\r\nconst renderCell = (object, type, key) => {\r\n  const value = object[key];\r\n  switch (type) {\r\n    case 'ImageCell':\r\n      return ImageCell(value);\r\n    case 'DateCell':\r\n      return DateCell(value);\r\n    case 'LinkCell':\r\n      return LinkCell(value);\r\n    default:\r\n      return TextCell(value);\r\n  }\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    title: <IntlMessages id=\"antTable.title.image\" />,\r\n    key: 'avatar',\r\n    width: '1%',\r\n    className: 'isoImageCell',\r\n    render: object => renderCell(object, 'ImageCell', 'avatar'),\r\n  },\r\n  {\r\n    title: <IntlMessages id=\"Tên\" />,\r\n    key: 'firstName',\r\n    width: 100,\r\n    render: object => renderCell(object, 'TextCell', 'firstName'),\r\n  },\r\n  {\r\n    title: <IntlMessages id=\"Giá\" />,\r\n    key: 'lastName',\r\n    width: 100,\r\n    render: object => renderCell(object, 'TextCell', 'lastName'),\r\n  },\r\n  {\r\n    title: <IntlMessages id=\"Giá ưu đãi\" />,\r\n    key: 'city',\r\n    width: 200,\r\n    render: object => renderCell(object, 'TextCell', 'city'),\r\n  },\r\n  {\r\n    title: <IntlMessages id=\"Dành cho\" />,\r\n    key: 'email',\r\n    width: 200,\r\n    render: object => renderCell(object, 'LinkCell', 'email'),\r\n  },\r\n  {\r\n    title: <IntlMessages id=\"Thời gian thực hiện\" />,\r\n    key: 'street',\r\n    width: 200,\r\n    render: object => renderCell(object, 'TextCell', 'street'),\r\n  },\r\n\r\n  {\r\n    title: <IntlMessages id=\"Danh mục\" />,\r\n    key: 'date',\r\n    width: 200,\r\n    render: object => renderCell(object, 'DateCell', 'date'),\r\n  },\r\n];\r\nconst smallColumns = [columns[1], columns[2], columns[3], columns[4],columns[5],columns[6]];\r\nconst sortColumns = [\r\n  { ...columns[1], sorter: true },\r\n  { ...columns[2], sorter: true },\r\n  { ...columns[3], sorter: true },\r\n  { ...columns[4], sorter: true },\r\n];\r\nconst editColumns = [\r\n  { ...columns[1], width: 300 },\r\n  { ...columns[2], width: 300 },\r\n  columns[3],\r\n  columns[4],\r\n];\r\nconst groupColumns = [\r\n  columns[0],\r\n  {\r\n    title: 'Name',\r\n    children: [columns[1], columns[2]],\r\n  },\r\n  {\r\n    title: 'Address',\r\n    children: [columns[3], columns[4]],\r\n  },\r\n];\r\nconst tableinfos = [\r\n  {\r\n    title: 'Lịch hẹn đang chờ',\r\n    value: 'all_booking',\r\n    columns: clone(smallColumns),\r\n  },\r\n  {\r\n    title: 'Lịch hẹn đang làm',\r\n    value: 'success_booking',\r\n    columns: clone(smallColumns),\r\n  },\r\n  {\r\n    title: 'Lịch hẹn dang',\r\n    value: 'wait_booking',\r\n    columns: clone(smallColumns),\r\n  },\r\n  \r\n];\r\nexport { columns, tableinfos };\r\n"]},"metadata":{},"sourceType":"module"}