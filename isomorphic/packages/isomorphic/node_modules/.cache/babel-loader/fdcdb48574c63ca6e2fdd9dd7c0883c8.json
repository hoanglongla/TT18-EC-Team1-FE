{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nexports.default = parseAlgoliaHit;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Find an highlighted attribute given an `attributeName` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highligtPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attributeName - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\n\n\nfunction parseAlgoliaHit(_ref) {\n  var _ref$preTag = _ref.preTag,\n      preTag = _ref$preTag === undefined ? '<em>' : _ref$preTag,\n      _ref$postTag = _ref.postTag,\n      postTag = _ref$postTag === undefined ? '</em>' : _ref$postTag,\n      highlightProperty = _ref.highlightProperty,\n      attributeName = _ref.attributeName,\n      hit = _ref.hit;\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n  var highlightObject = (0, _get3.default)(hit[highlightProperty], attributeName, {});\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map(function (item) {\n      return parseHighlightedAttribute({\n        preTag: preTag,\n        postTag: postTag,\n        highlightedValue: item.value\n      });\n    });\n  }\n\n  return parseHighlightedAttribute({\n    preTag: preTag,\n    postTag: postTag,\n    highlightedValue: highlightObject.value\n  });\n}\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isDefined: boolean}.\n */\n\n\nfunction parseHighlightedAttribute(_ref2) {\n  var preTag = _ref2.preTag,\n      postTag = _ref2.postTag,\n      _ref2$highlightedValu = _ref2.highlightedValue,\n      highlightedValue = _ref2$highlightedValu === undefined ? '' : _ref2$highlightedValu;\n  var splitByPreTag = highlightedValue.split(preTag);\n  var firstValue = splitByPreTag.shift();\n  var elements = firstValue === '' ? [] : [{\n    value: firstValue,\n    isHighlighted: false\n  }];\n\n  if (postTag === preTag) {\n    var isHighlighted = true;\n    splitByPreTag.forEach(function (split) {\n      elements.push({\n        value: split,\n        isHighlighted: isHighlighted\n      });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach(function (split) {\n      var splitByPostTag = split.split(postTag);\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          value: splitByPostTag[1],\n          isHighlighted: false\n        });\n      }\n    });\n  }\n\n  return elements;\n}","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/node_modules/react-instantsearch/src/core/highlight.js"],"names":["Object","defineProperty","exports","value","_get2","require","_get3","_interopRequireDefault","default","parseAlgoliaHit","obj","__esModule","_ref","_ref$preTag","preTag","undefined","_ref$postTag","postTag","highlightProperty","attributeName","hit","Error","highlightObject","Array","isArray","map","item","parseHighlightedAttribute","highlightedValue","_ref2","_ref2$highlightedValu","splitByPreTag","split","firstValue","shift","elements","isHighlighted","forEach","push","splitByPostTag"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nexports.default = parseAlgoliaHit;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Find an highlighted attribute given an `attributeName` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highligtPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attributeName - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nfunction parseAlgoliaHit(_ref) {\n  var _ref$preTag = _ref.preTag,\n      preTag = _ref$preTag === undefined ? '<em>' : _ref$preTag,\n      _ref$postTag = _ref.postTag,\n      postTag = _ref$postTag === undefined ? '</em>' : _ref$postTag,\n      highlightProperty = _ref.highlightProperty,\n      attributeName = _ref.attributeName,\n      hit = _ref.hit;\n\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n\n  var highlightObject = (0, _get3.default)(hit[highlightProperty], attributeName, {});\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map(function (item) {\n      return parseHighlightedAttribute({\n        preTag: preTag,\n        postTag: postTag,\n        highlightedValue: item.value\n      });\n    });\n  }\n\n  return parseHighlightedAttribute({\n    preTag: preTag,\n    postTag: postTag,\n    highlightedValue: highlightObject.value\n  });\n}\n\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isDefined: boolean}.\n */\nfunction parseHighlightedAttribute(_ref2) {\n  var preTag = _ref2.preTag,\n      postTag = _ref2.postTag,\n      _ref2$highlightedValu = _ref2.highlightedValue,\n      highlightedValue = _ref2$highlightedValu === undefined ? '' : _ref2$highlightedValu;\n\n  var splitByPreTag = highlightedValue.split(preTag);\n  var firstValue = splitByPreTag.shift();\n  var elements = firstValue === '' ? [] : [{ value: firstValue, isHighlighted: false }];\n\n  if (postTag === preTag) {\n    var isHighlighted = true;\n    splitByPreTag.forEach(function (split) {\n      elements.push({ value: split, isHighlighted: isHighlighted });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach(function (split) {\n      var splitByPostTag = split.split(postTag);\n\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          value: splitByPostTag[1],\n          isHighlighted: false\n        });\n      }\n    });\n  }\n\n  return elements;\n}"]},"metadata":{},"sourceType":"script"}