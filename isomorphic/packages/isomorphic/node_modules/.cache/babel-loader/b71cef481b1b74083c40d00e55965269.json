{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _indexUtils = require('../core/indexUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getId(props) {\n  return props.attributeName;\n}\n\nvar namespace = 'toggle';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, namespace + '.' + getId(props), false, function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n\n    return false;\n  });\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId(props);\n\n  var nextValue = _defineProperty({}, id, nextRefinement ? nextRefinement : false);\n\n  var resetPage = true;\n  return (0, _indexUtils.refineValue)(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return (0, _indexUtils.cleanUpValue)(searchState, context, namespace + '.' + getId(props));\n}\n/**\n * connectToggle connector provides the logic to build a widget that will\n * provides an on/off filtering feature based on an attribute value.\n * @name connectToggle\n * @kind connector\n * @requirements To use this widget, you'll need an attribute to toggle on.\n *\n * You can't toggle on null or not-null values. If you want to address this particular use-case you'll need to compute an\n * extra boolean attribute saying if the value exists or not. See this [thread](https://discourse.algolia.com/t/how-to-create-a-toggle-for-the-absence-of-a-string-attribute/2460) for more details.\n *\n * @propType {string} attributeName - Name of the attribute on which to apply the `value` refinement. Required when `value` is present.\n * @propType {string} label - Label for the toggle.\n * @propType {string} value - Value of the refinement to apply on `attributeName`.\n * @propType {boolean} [defaultRefinement=false] - Default searchState of the widget. Should the toggle be checked by default?\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {boolean} currentRefinement - `true` when the refinement is applied, `false` otherwise\n */\n\n\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaToggle',\n  propTypes: {\n    label: _propTypes2.default.string,\n    filter: _propTypes2.default.func,\n    attributeName: _propTypes2.default.string,\n    value: _propTypes2.default.any,\n    defaultRefinement: _propTypes2.default.bool\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return {\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var attributeName = props.attributeName,\n        value = props.value,\n        filter = props.filter;\n    var checked = getCurrentRefinement(props, searchState, this.context);\n\n    if (checked) {\n      if (attributeName) {\n        searchParameters = searchParameters.addFacet(attributeName).addFacetRefinement(attributeName, value);\n      }\n\n      if (filter) {\n        searchParameters = filter(searchParameters);\n      }\n    }\n\n    return searchParameters;\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this = this;\n\n    var id = getId(props);\n    var checked = getCurrentRefinement(props, searchState, this.context);\n    var items = [];\n    var index = (0, _indexUtils.getIndex)(this.context);\n\n    if (checked) {\n      items.push({\n        label: props.label,\n        currentRefinement: checked,\n        attributeName: props.attributeName,\n        value: function value(nextState) {\n          return _refine(props, nextState, false, _this.context);\n        }\n      });\n    }\n\n    return {\n      id: id,\n      index: index,\n      items: items\n    };\n  }\n});","map":{"version":3,"sources":["D:/TT18-EC-Team1-FE/isomorphic/node_modules/react-instantsearch/src/connectors/connectToggle.js"],"names":["Object","defineProperty","exports","value","_propTypes","require","_propTypes2","_interopRequireDefault","_createConnector","_createConnector2","_indexUtils","obj","__esModule","default","_defineProperty","key","enumerable","configurable","writable","getId","props","attributeName","namespace","getCurrentRefinement","searchState","context","getCurrentRefinementValue","currentRefinement","_refine","nextRefinement","id","nextValue","resetPage","refineValue","_cleanUp","cleanUpValue","displayName","propTypes","label","string","filter","func","any","defaultRefinement","bool","getProvidedProps","refine","cleanUp","getSearchParameters","searchParameters","checked","addFacet","addFacetRefinement","getMetadata","_this","items","index","getIndex","push","nextState"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACH,UAAD,CAAxC;;AAEA,IAAII,gBAAgB,GAAGH,OAAO,CAAC,yBAAD,CAA9B;;AAEA,IAAII,iBAAiB,GAAGF,sBAAsB,CAACC,gBAAD,CAA9C;;AAEA,IAAIE,WAAW,GAAGL,OAAO,CAAC,oBAAD,CAAzB;;AAEA,SAASE,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASG,eAAT,CAAyBH,GAAzB,EAA8BI,GAA9B,EAAmCZ,KAAnC,EAA0C;AAAE,MAAIY,GAAG,IAAIJ,GAAX,EAAgB;AAAEX,IAAAA,MAAM,CAACC,cAAP,CAAsBU,GAAtB,EAA2BI,GAA3B,EAAgC;AAAEZ,MAAAA,KAAK,EAAEA,KAAT;AAAgBa,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACI,GAAD,CAAH,GAAWZ,KAAX;AAAmB;;AAAC,SAAOQ,GAAP;AAAa;;AAEjN,SAASQ,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CAACC,aAAb;AACD;;AAED,IAAIC,SAAS,GAAG,QAAhB;;AAEA,SAASC,oBAAT,CAA8BH,KAA9B,EAAqCI,WAArC,EAAkDC,OAAlD,EAA2D;AACzD,SAAO,CAAC,GAAGf,WAAW,CAACgB,yBAAhB,EAA2CN,KAA3C,EAAkDI,WAAlD,EAA+DC,OAA/D,EAAwEH,SAAS,GAAG,GAAZ,GAAkBH,KAAK,CAACC,KAAD,CAA/F,EAAwG,KAAxG,EAA+G,UAAUO,iBAAV,EAA6B;AACjJ,QAAIA,iBAAJ,EAAuB;AACrB,aAAOA,iBAAP;AACD;;AACD,WAAO,KAAP;AACD,GALM,CAAP;AAMD;;AAED,SAASC,OAAT,CAAiBR,KAAjB,EAAwBI,WAAxB,EAAqCK,cAArC,EAAqDJ,OAArD,EAA8D;AAC5D,MAAIK,EAAE,GAAGX,KAAK,CAACC,KAAD,CAAd;;AACA,MAAIW,SAAS,GAAGjB,eAAe,CAAC,EAAD,EAAKgB,EAAL,EAASD,cAAc,GAAGA,cAAH,GAAoB,KAA3C,CAA/B;;AACA,MAAIG,SAAS,GAAG,IAAhB;AACA,SAAO,CAAC,GAAGtB,WAAW,CAACuB,WAAhB,EAA6BT,WAA7B,EAA0CO,SAA1C,EAAqDN,OAArD,EAA8DO,SAA9D,EAAyEV,SAAzE,CAAP;AACD;;AAED,SAASY,QAAT,CAAkBd,KAAlB,EAAyBI,WAAzB,EAAsCC,OAAtC,EAA+C;AAC7C,SAAO,CAAC,GAAGf,WAAW,CAACyB,YAAhB,EAA8BX,WAA9B,EAA2CC,OAA3C,EAAoDH,SAAS,GAAG,GAAZ,GAAkBH,KAAK,CAACC,KAAD,CAA3E,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlB,OAAO,CAACW,OAAR,GAAkB,CAAC,GAAGJ,iBAAiB,CAACI,OAAtB,EAA+B;AAC/CuB,EAAAA,WAAW,EAAE,eADkC;AAG/CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAEhC,WAAW,CAACO,OAAZ,CAAoB0B,MADlB;AAETC,IAAAA,MAAM,EAAElC,WAAW,CAACO,OAAZ,CAAoB4B,IAFnB;AAGTpB,IAAAA,aAAa,EAAEf,WAAW,CAACO,OAAZ,CAAoB0B,MAH1B;AAITpC,IAAAA,KAAK,EAAEG,WAAW,CAACO,OAAZ,CAAoB6B,GAJlB;AAKTC,IAAAA,iBAAiB,EAAErC,WAAW,CAACO,OAAZ,CAAoB+B;AAL9B,GAHoC;AAW/CC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BzB,KAA1B,EAAiCI,WAAjC,EAA8C;AAC9D,QAAIG,iBAAiB,GAAGJ,oBAAoB,CAACH,KAAD,EAAQI,WAAR,EAAqB,KAAKC,OAA1B,CAA5C;AACA,WAAO;AAAEE,MAAAA,iBAAiB,EAAEA;AAArB,KAAP;AACD,GAd8C;AAe/CmB,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgB1B,KAAhB,EAAuBI,WAAvB,EAAoCK,cAApC,EAAoD;AAC1D,WAAOD,OAAO,CAACR,KAAD,EAAQI,WAAR,EAAqBK,cAArB,EAAqC,KAAKJ,OAA1C,CAAd;AACD,GAjB8C;AAkB/CsB,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiB3B,KAAjB,EAAwBI,WAAxB,EAAqC;AAC5C,WAAOU,QAAQ,CAACd,KAAD,EAAQI,WAAR,EAAqB,KAAKC,OAA1B,CAAf;AACD,GApB8C;AAqB/CuB,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BC,gBAA7B,EAA+C7B,KAA/C,EAAsDI,WAAtD,EAAmE;AACtF,QAAIH,aAAa,GAAGD,KAAK,CAACC,aAA1B;AAAA,QACIlB,KAAK,GAAGiB,KAAK,CAACjB,KADlB;AAAA,QAEIqC,MAAM,GAAGpB,KAAK,CAACoB,MAFnB;AAIA,QAAIU,OAAO,GAAG3B,oBAAoB,CAACH,KAAD,EAAQI,WAAR,EAAqB,KAAKC,OAA1B,CAAlC;;AAEA,QAAIyB,OAAJ,EAAa;AACX,UAAI7B,aAAJ,EAAmB;AACjB4B,QAAAA,gBAAgB,GAAGA,gBAAgB,CAACE,QAAjB,CAA0B9B,aAA1B,EAAyC+B,kBAAzC,CAA4D/B,aAA5D,EAA2ElB,KAA3E,CAAnB;AACD;;AACD,UAAIqC,MAAJ,EAAY;AACVS,QAAAA,gBAAgB,GAAGT,MAAM,CAACS,gBAAD,CAAzB;AACD;AACF;;AAED,WAAOA,gBAAP;AACD,GAtC8C;AAuC/CI,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBjC,KAArB,EAA4BI,WAA5B,EAAyC;AACpD,QAAI8B,KAAK,GAAG,IAAZ;;AAEA,QAAIxB,EAAE,GAAGX,KAAK,CAACC,KAAD,CAAd;AACA,QAAI8B,OAAO,GAAG3B,oBAAoB,CAACH,KAAD,EAAQI,WAAR,EAAqB,KAAKC,OAA1B,CAAlC;AACA,QAAI8B,KAAK,GAAG,EAAZ;AACA,QAAIC,KAAK,GAAG,CAAC,GAAG9C,WAAW,CAAC+C,QAAhB,EAA0B,KAAKhC,OAA/B,CAAZ;;AAEA,QAAIyB,OAAJ,EAAa;AACXK,MAAAA,KAAK,CAACG,IAAN,CAAW;AACTpB,QAAAA,KAAK,EAAElB,KAAK,CAACkB,KADJ;AAETX,QAAAA,iBAAiB,EAAEuB,OAFV;AAGT7B,QAAAA,aAAa,EAAED,KAAK,CAACC,aAHZ;AAITlB,QAAAA,KAAK,EAAE,SAASA,KAAT,CAAewD,SAAf,EAA0B;AAC/B,iBAAO/B,OAAO,CAACR,KAAD,EAAQuC,SAAR,EAAmB,KAAnB,EAA0BL,KAAK,CAAC7B,OAAhC,CAAd;AACD;AANQ,OAAX;AAQD;;AAED,WAAO;AAAEK,MAAAA,EAAE,EAAEA,EAAN;AAAU0B,MAAAA,KAAK,EAAEA,KAAjB;AAAwBD,MAAAA,KAAK,EAAEA;AAA/B,KAAP;AACD;AA3D8C,CAA/B,CAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _indexUtils = require('../core/indexUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction getId(props) {\n  return props.attributeName;\n}\n\nvar namespace = 'toggle';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, namespace + '.' + getId(props), false, function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n    return false;\n  });\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId(props);\n  var nextValue = _defineProperty({}, id, nextRefinement ? nextRefinement : false);\n  var resetPage = true;\n  return (0, _indexUtils.refineValue)(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return (0, _indexUtils.cleanUpValue)(searchState, context, namespace + '.' + getId(props));\n}\n\n/**\n * connectToggle connector provides the logic to build a widget that will\n * provides an on/off filtering feature based on an attribute value.\n * @name connectToggle\n * @kind connector\n * @requirements To use this widget, you'll need an attribute to toggle on.\n *\n * You can't toggle on null or not-null values. If you want to address this particular use-case you'll need to compute an\n * extra boolean attribute saying if the value exists or not. See this [thread](https://discourse.algolia.com/t/how-to-create-a-toggle-for-the-absence-of-a-string-attribute/2460) for more details.\n *\n * @propType {string} attributeName - Name of the attribute on which to apply the `value` refinement. Required when `value` is present.\n * @propType {string} label - Label for the toggle.\n * @propType {string} value - Value of the refinement to apply on `attributeName`.\n * @propType {boolean} [defaultRefinement=false] - Default searchState of the widget. Should the toggle be checked by default?\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {boolean} currentRefinement - `true` when the refinement is applied, `false` otherwise\n */\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaToggle',\n\n  propTypes: {\n    label: _propTypes2.default.string,\n    filter: _propTypes2.default.func,\n    attributeName: _propTypes2.default.string,\n    value: _propTypes2.default.any,\n    defaultRefinement: _propTypes2.default.bool\n  },\n\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return { currentRefinement: currentRefinement };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var attributeName = props.attributeName,\n        value = props.value,\n        filter = props.filter;\n\n    var checked = getCurrentRefinement(props, searchState, this.context);\n\n    if (checked) {\n      if (attributeName) {\n        searchParameters = searchParameters.addFacet(attributeName).addFacetRefinement(attributeName, value);\n      }\n      if (filter) {\n        searchParameters = filter(searchParameters);\n      }\n    }\n\n    return searchParameters;\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this = this;\n\n    var id = getId(props);\n    var checked = getCurrentRefinement(props, searchState, this.context);\n    var items = [];\n    var index = (0, _indexUtils.getIndex)(this.context);\n\n    if (checked) {\n      items.push({\n        label: props.label,\n        currentRefinement: checked,\n        attributeName: props.attributeName,\n        value: function value(nextState) {\n          return _refine(props, nextState, false, _this.context);\n        }\n      });\n    }\n\n    return { id: id, index: index, items: items };\n  }\n});"]},"metadata":{},"sourceType":"script"}