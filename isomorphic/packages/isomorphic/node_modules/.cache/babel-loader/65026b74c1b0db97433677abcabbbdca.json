{"ast":null,"code":"var _require = require('preact'),\n    h = _require.h;\n\nvar uploadStates = {\n  STATE_ERROR: 'error',\n  STATE_WAITING: 'waiting',\n  STATE_PREPROCESSING: 'preprocessing',\n  STATE_UPLOADING: 'uploading',\n  STATE_POSTPROCESSING: 'postprocessing',\n  STATE_COMPLETE: 'complete',\n  STATE_PAUSED: 'paused'\n};\n\nfunction getUploadingState(isAllErrored, isAllComplete, isAllPaused, files) {\n  if (files === void 0) {\n    files = {};\n  }\n\n  if (isAllErrored) {\n    return uploadStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return uploadStates.STATE_COMPLETE;\n  }\n\n  if (isAllPaused) {\n    return uploadStates.STATE_PAUSED;\n  }\n\n  var state = uploadStates.STATE_WAITING;\n  var fileIDs = Object.keys(files);\n\n  for (var i = 0; i < fileIDs.length; i++) {\n    var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return uploadStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {\n      state = uploadStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {\n      state = uploadStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}\n\nfunction UploadStatus(props) {\n  var uploadingState = getUploadingState(props.isAllErrored, props.isAllComplete, props.isAllPaused, props.files);\n\n  switch (uploadingState) {\n    case 'uploading':\n      return props.i18n('uploadingXFiles', {\n        smart_count: props.inProgressNotPausedFiles.length\n      });\n\n    case 'preprocessing':\n    case 'postprocessing':\n      return props.i18n('processingXFiles', {\n        smart_count: props.processingFiles.length\n      });\n\n    case 'paused':\n      return props.i18n('uploadPaused');\n\n    case 'waiting':\n      return props.i18n('xFilesSelected', {\n        smart_count: props.newFiles.length\n      });\n\n    case 'complete':\n      return props.i18n('uploadComplete');\n  }\n}\n\nfunction PanelTopBar(props) {\n  var allowNewUpload = props.allowNewUpload; // TODO maybe this should be done in ../index.js, then just pass that down as `allowNewUpload`\n\n  if (allowNewUpload && props.maxNumberOfFiles) {\n    allowNewUpload = props.totalFileCount < props.maxNumberOfFiles;\n  }\n\n  return h(\"div\", {\n    className: \"uppy-DashboardContent-bar\"\n  }, !props.isAllComplete && !props.hideCancelButton ? h(\"button\", {\n    className: \"uppy-DashboardContent-back\",\n    type: \"button\",\n    onClick: props.cancelAll\n  }, props.i18n('cancel')) : h(\"div\", null), h(\"div\", {\n    className: \"uppy-DashboardContent-title\",\n    role: \"heading\",\n    \"aria-level\": \"1\"\n  }, h(UploadStatus, props)), allowNewUpload ? h(\"button\", {\n    className: \"uppy-DashboardContent-addMore\",\n    type: \"button\",\n    \"aria-label\": props.i18n('addMoreFiles'),\n    title: props.i18n('addMoreFiles'),\n    onClick: function onClick() {\n      return props.toggleAddFilesPanel(true);\n    }\n  }, h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    className: \"uppy-c-icon\",\n    width: \"15\",\n    height: \"15\",\n    viewBox: \"0 0 15 15\"\n  }, h(\"path\", {\n    d: \"M8 6.5h6a.5.5 0 0 1 .5.5v.5a.5.5 0 0 1-.5.5H8v6a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V8h-6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h6v-6A.5.5 0 0 1 7 0h.5a.5.5 0 0 1 .5.5v6z\"\n  })), h(\"span\", {\n    className: \"uppy-DashboardContent-addMoreCaption\"\n  }, props.i18n('addMore'))) : h(\"div\", null));\n}\n\nmodule.exports = PanelTopBar;","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/@uppy/dashboard/lib/components/PickerPanelTopBar.js"],"names":["_require","require","h","uploadStates","STATE_ERROR","STATE_WAITING","STATE_PREPROCESSING","STATE_UPLOADING","STATE_POSTPROCESSING","STATE_COMPLETE","STATE_PAUSED","getUploadingState","isAllErrored","isAllComplete","isAllPaused","files","state","fileIDs","Object","keys","i","length","progress","uploadStarted","uploadComplete","preprocess","postprocess","UploadStatus","props","uploadingState","i18n","smart_count","inProgressNotPausedFiles","processingFiles","newFiles","PanelTopBar","allowNewUpload","maxNumberOfFiles","totalFileCount","className","hideCancelButton","type","onClick","cancelAll","role","title","toggleAddFilesPanel","focusable","width","height","viewBox","d","module","exports"],"mappings":"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","sourcesContent":["var _require = require('preact'),\n    h = _require.h;\n\nvar uploadStates = {\n  STATE_ERROR: 'error',\n  STATE_WAITING: 'waiting',\n  STATE_PREPROCESSING: 'preprocessing',\n  STATE_UPLOADING: 'uploading',\n  STATE_POSTPROCESSING: 'postprocessing',\n  STATE_COMPLETE: 'complete',\n  STATE_PAUSED: 'paused'\n};\n\nfunction getUploadingState(isAllErrored, isAllComplete, isAllPaused, files) {\n  if (files === void 0) {\n    files = {};\n  }\n\n  if (isAllErrored) {\n    return uploadStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return uploadStates.STATE_COMPLETE;\n  }\n\n  if (isAllPaused) {\n    return uploadStates.STATE_PAUSED;\n  }\n\n  var state = uploadStates.STATE_WAITING;\n  var fileIDs = Object.keys(files);\n\n  for (var i = 0; i < fileIDs.length; i++) {\n    var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return uploadStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {\n      state = uploadStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {\n      state = uploadStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}\n\nfunction UploadStatus(props) {\n  var uploadingState = getUploadingState(props.isAllErrored, props.isAllComplete, props.isAllPaused, props.files);\n\n  switch (uploadingState) {\n    case 'uploading':\n      return props.i18n('uploadingXFiles', {\n        smart_count: props.inProgressNotPausedFiles.length\n      });\n\n    case 'preprocessing':\n    case 'postprocessing':\n      return props.i18n('processingXFiles', {\n        smart_count: props.processingFiles.length\n      });\n\n    case 'paused':\n      return props.i18n('uploadPaused');\n\n    case 'waiting':\n      return props.i18n('xFilesSelected', {\n        smart_count: props.newFiles.length\n      });\n\n    case 'complete':\n      return props.i18n('uploadComplete');\n  }\n}\n\nfunction PanelTopBar(props) {\n  var allowNewUpload = props.allowNewUpload; // TODO maybe this should be done in ../index.js, then just pass that down as `allowNewUpload`\n\n  if (allowNewUpload && props.maxNumberOfFiles) {\n    allowNewUpload = props.totalFileCount < props.maxNumberOfFiles;\n  }\n\n  return h(\"div\", {\n    className: \"uppy-DashboardContent-bar\"\n  }, !props.isAllComplete && !props.hideCancelButton ? h(\"button\", {\n    className: \"uppy-DashboardContent-back\",\n    type: \"button\",\n    onClick: props.cancelAll\n  }, props.i18n('cancel')) : h(\"div\", null), h(\"div\", {\n    className: \"uppy-DashboardContent-title\",\n    role: \"heading\",\n    \"aria-level\": \"1\"\n  }, h(UploadStatus, props)), allowNewUpload ? h(\"button\", {\n    className: \"uppy-DashboardContent-addMore\",\n    type: \"button\",\n    \"aria-label\": props.i18n('addMoreFiles'),\n    title: props.i18n('addMoreFiles'),\n    onClick: function onClick() {\n      return props.toggleAddFilesPanel(true);\n    }\n  }, h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    className: \"uppy-c-icon\",\n    width: \"15\",\n    height: \"15\",\n    viewBox: \"0 0 15 15\"\n  }, h(\"path\", {\n    d: \"M8 6.5h6a.5.5 0 0 1 .5.5v.5a.5.5 0 0 1-.5.5H8v6a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V8h-6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h6v-6A.5.5 0 0 1 7 0h.5a.5.5 0 0 1 .5.5v6z\"\n  })), h(\"span\", {\n    className: \"uppy-DashboardContent-addMoreCaption\"\n  }, props.i18n('addMore'))) : h(\"div\", null));\n}\n\nmodule.exports = PanelTopBar;"]},"metadata":{},"sourceType":"script"}