{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * connectCurrentRefinements connector provides the logic to build a widget that will\n * give the user the ability to remove all or some of the filters that were\n * set.\n * @name connectCurrentRefinements\n * @kind connector\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @propType {function} [clearsQuery=false] - Pass true to also clear the search query\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {array.<{label: string, attributeName: string, currentRefinement: string || object, items: array, value: function}>} items - all the filters, the `value` is to pass to the `refine` function for removing all currentrefinements, `label` is for the display. When existing several refinements for the same atribute name, then you get a nested `items` object that contains a `label` and a `value` function to use to remove a single filter. `attributeName` and `currentRefinement` are metadata containing row values.\n * @providedPropType {string} query - the search query\n */\n\n\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaCurrentRefinements',\n  propTypes: {\n    transformItems: _propTypes2.default.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, metadata) {\n    var items = metadata.reduce(function (res, meta) {\n      if (typeof meta.items !== 'undefined') {\n        if (!props.clearsQuery && meta.id === 'query') {\n          return res;\n        } else {\n          if (props.clearsQuery && meta.id === 'query' && meta.items[0].currentRefinement === '') {\n            return res;\n          }\n\n          return res.concat(meta.items.map(function (item) {\n            return _extends({}, item, {\n              id: meta.id,\n              index: meta.index\n            });\n          }));\n        }\n      }\n\n      return res;\n    }, []);\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      canRefine: items.length > 0\n    };\n  },\n  refine: function refine(props, searchState, items) {\n    // `value` corresponds to our internal clear function computed in each connector metadata.\n    var refinementsToClear = items instanceof Array ? items.map(function (item) {\n      return item.value;\n    }) : [items];\n    return refinementsToClear.reduce(function (res, clear) {\n      return clear(res);\n    }, searchState);\n  }\n});","map":{"version":3,"sources":["D:/Team6-FE/isomorphic/node_modules/react-instantsearch/src/connectors/connectCurrentRefinements.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createConnector","require","_createConnector2","_interopRequireDefault","_propTypes","_propTypes2","obj","__esModule","default","displayName","propTypes","transformItems","func","getProvidedProps","props","searchState","searchResults","metadata","items","reduce","res","meta","clearsQuery","id","currentRefinement","concat","map","item","index","canRefine","refine","refinementsToClear","Array","clear"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGJ,MAAM,CAACK,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIV,MAAM,CAACY,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,IAAIS,gBAAgB,GAAGC,OAAO,CAAC,yBAAD,CAA9B;;AAEA,IAAIC,iBAAiB,GAAGC,sBAAsB,CAACH,gBAAD,CAA9C;;AAEA,IAAII,UAAU,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AAEA,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAD,CAAxC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,OAAO,CAACqB,OAAR,GAAkB,CAAC,GAAGN,iBAAiB,CAACM,OAAtB,EAA+B;AAC/CC,EAAAA,WAAW,EAAE,2BADkC;AAG/CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EAAEN,WAAW,CAACG,OAAZ,CAAoBI;AAD3B,GAHoC;AAO/CC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,WAAjC,EAA8CC,aAA9C,EAA6DC,QAA7D,EAAuE;AACvF,QAAIC,KAAK,GAAGD,QAAQ,CAACE,MAAT,CAAgB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC/C,UAAI,OAAOA,IAAI,CAACH,KAAZ,KAAsB,WAA1B,EAAuC;AACrC,YAAI,CAACJ,KAAK,CAACQ,WAAP,IAAsBD,IAAI,CAACE,EAAL,KAAY,OAAtC,EAA+C;AAC7C,iBAAOH,GAAP;AACD,SAFD,MAEO;AACL,cAAIN,KAAK,CAACQ,WAAN,IAAqBD,IAAI,CAACE,EAAL,KAAY,OAAjC,IAA4CF,IAAI,CAACH,KAAL,CAAW,CAAX,EAAcM,iBAAd,KAAoC,EAApF,EAAwF;AACtF,mBAAOJ,GAAP;AACD;;AACD,iBAAOA,GAAG,CAACK,MAAJ,CAAWJ,IAAI,CAACH,KAAL,CAAWQ,GAAX,CAAe,UAAUC,IAAV,EAAgB;AAC/C,mBAAOtC,QAAQ,CAAC,EAAD,EAAKsC,IAAL,EAAW;AACxBJ,cAAAA,EAAE,EAAEF,IAAI,CAACE,EADe;AAExBK,cAAAA,KAAK,EAAEP,IAAI,CAACO;AAFY,aAAX,CAAf;AAID,WALiB,CAAX,CAAP;AAMD;AACF;;AACD,aAAOR,GAAP;AACD,KAjBW,EAiBT,EAjBS,CAAZ;AAmBA,WAAO;AACLF,MAAAA,KAAK,EAAEJ,KAAK,CAACH,cAAN,GAAuBG,KAAK,CAACH,cAAN,CAAqBO,KAArB,CAAvB,GAAqDA,KADvD;AAELW,MAAAA,SAAS,EAAEX,KAAK,CAACxB,MAAN,GAAe;AAFrB,KAAP;AAID,GA/B8C;AAgC/CoC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBhB,KAAhB,EAAuBC,WAAvB,EAAoCG,KAApC,EAA2C;AACjD;AACA,QAAIa,kBAAkB,GAAGb,KAAK,YAAYc,KAAjB,GAAyBd,KAAK,CAACQ,GAAN,CAAU,UAAUC,IAAV,EAAgB;AAC1E,aAAOA,IAAI,CAACvC,KAAZ;AACD,KAFiD,CAAzB,GAEpB,CAAC8B,KAAD,CAFL;AAGA,WAAOa,kBAAkB,CAACZ,MAAnB,CAA0B,UAAUC,GAAV,EAAea,KAAf,EAAsB;AACrD,aAAOA,KAAK,CAACb,GAAD,CAAZ;AACD,KAFM,EAEJL,WAFI,CAAP;AAGD;AAxC8C,CAA/B,CAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * connectCurrentRefinements connector provides the logic to build a widget that will\n * give the user the ability to remove all or some of the filters that were\n * set.\n * @name connectCurrentRefinements\n * @kind connector\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @propType {function} [clearsQuery=false] - Pass true to also clear the search query\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {array.<{label: string, attributeName: string, currentRefinement: string || object, items: array, value: function}>} items - all the filters, the `value` is to pass to the `refine` function for removing all currentrefinements, `label` is for the display. When existing several refinements for the same atribute name, then you get a nested `items` object that contains a `label` and a `value` function to use to remove a single filter. `attributeName` and `currentRefinement` are metadata containing row values.\n * @providedPropType {string} query - the search query\n */\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaCurrentRefinements',\n\n  propTypes: {\n    transformItems: _propTypes2.default.func\n  },\n\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, metadata) {\n    var items = metadata.reduce(function (res, meta) {\n      if (typeof meta.items !== 'undefined') {\n        if (!props.clearsQuery && meta.id === 'query') {\n          return res;\n        } else {\n          if (props.clearsQuery && meta.id === 'query' && meta.items[0].currentRefinement === '') {\n            return res;\n          }\n          return res.concat(meta.items.map(function (item) {\n            return _extends({}, item, {\n              id: meta.id,\n              index: meta.index\n            });\n          }));\n        }\n      }\n      return res;\n    }, []);\n\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      canRefine: items.length > 0\n    };\n  },\n  refine: function refine(props, searchState, items) {\n    // `value` corresponds to our internal clear function computed in each connector metadata.\n    var refinementsToClear = items instanceof Array ? items.map(function (item) {\n      return item.value;\n    }) : [items];\n    return refinementsToClear.reduce(function (res, clear) {\n      return clear(res);\n    }, searchState);\n  }\n});"]},"metadata":{},"sourceType":"script"}