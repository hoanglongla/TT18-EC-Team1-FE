{"ast":null,"code":"import _objectSpread from \"D:\\\\For study\\\\Github\\\\GitClone\\\\Team6-FE\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\For study\\\\Github\\\\GitClone\\\\Team6-FE\\\\isomorphic\\\\packages\\\\hotel\\\\src\\\\container\\\\Layout\\\\Header\\\\NavbarSearch.js\";\n\nimport React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport { withRouter } from 'react-router-dom';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\nimport MapAutoComplete from '@hotel/components/Map/MapAutoComplete';\nimport { NavbarSearchWrapper } from './Header.style';\nimport { setStateToUrl, getStateFromUrl } from '@iso/lib/helpers/url_handler';\nimport { MapDataHelper } from '@hotel/components/Map/MapLocationBox';\nimport { LISTING_POSTS_PAGE } from '../../../settings/constant';\n\nvar NavbarSearch = function NavbarSearch(props) {\n  var updatevalueFunc = function updatevalueFunc(value) {\n    var searchedPlaceAPIData = value.searchedPlaceAPIData;\n    var tempLocation = [];\n    var mapData = !isEmpty(searchedPlaceAPIData) ? MapDataHelper(searchedPlaceAPIData) : [];\n\n    if (!isEmpty(mapData) && mapData.length !== 0) {\n      mapData.forEach(function (singleMapData) {\n        return tempLocation.push({\n          lat: singleMapData ? singleMapData.lat.toFixed(3) : null,\n          lng: singleMapData ? singleMapData.lng.toFixed(3) : null\n        });\n      });\n    }\n\n    var searchLocation = tempLocation ? tempLocation[0] : {};\n\n    if (!isEmpty(searchLocation)) {\n      var state = getStateFromUrl(props.location);\n\n      var query = _objectSpread(_objectSpread({}, state), {}, {\n        location: searchLocation\n      });\n\n      var search = setStateToUrl(query);\n      props.history.push({\n        pathname: LISTING_POSTS_PAGE,\n        search: search\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(NavbarSearchWrapper, {\n    className: \"navbar_search\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MapAutoComplete, {\n    updatevalue: function updatevalue(value) {\n      return updatevalueFunc(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default withRouter(NavbarSearch);","map":{"version":3,"sources":["D:/For study/Github/GitClone/Team6-FE/isomorphic/packages/hotel/src/container/Layout/Header/NavbarSearch.js"],"names":["React","isEmpty","withRouter","FaMapMarkerAlt","MapAutoComplete","NavbarSearchWrapper","setStateToUrl","getStateFromUrl","MapDataHelper","LISTING_POSTS_PAGE","NavbarSearch","props","updatevalueFunc","value","searchedPlaceAPIData","tempLocation","mapData","length","forEach","singleMapData","push","lat","toFixed","lng","searchLocation","state","location","query","search","history","pathname"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,8BAA/C;AACA,SAASC,aAAT,QAA8B,sCAA9B;AACA,SAASC,kBAAT,QAAmC,4BAAnC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC5B,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,QAAQC,oBAAR,GAAiCD,KAAjC,CAAQC,oBAAR;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAMC,OAAO,GAAG,CAACf,OAAO,CAACa,oBAAD,CAAR,GACZN,aAAa,CAACM,oBAAD,CADD,GAEZ,EAFJ;;AAGA,QAAI,CAACb,OAAO,CAACe,OAAD,CAAR,IAAqBA,OAAO,CAACC,MAAR,KAAmB,CAA5C,EAA+C;AAC7CD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAAAC,aAAa;AAAA,eAC3BJ,YAAY,CAACK,IAAb,CAAkB;AAChBC,UAAAA,GAAG,EAAEF,aAAa,GAAGA,aAAa,CAACE,GAAd,CAAkBC,OAAlB,CAA0B,CAA1B,CAAH,GAAkC,IADpC;AAEhBC,UAAAA,GAAG,EAAEJ,aAAa,GAAGA,aAAa,CAACI,GAAd,CAAkBD,OAAlB,CAA0B,CAA1B,CAAH,GAAkC;AAFpC,SAAlB,CAD2B;AAAA,OAA7B;AAMD;;AACD,QAAME,cAAc,GAAGT,YAAY,GAAGA,YAAY,CAAC,CAAD,CAAf,GAAqB,EAAxD;;AACA,QAAI,CAACd,OAAO,CAACuB,cAAD,CAAZ,EAA8B;AAC5B,UAAMC,KAAK,GAAGlB,eAAe,CAACI,KAAK,CAACe,QAAP,CAA7B;;AACA,UAAMC,KAAK,mCACNF,KADM;AAETC,QAAAA,QAAQ,EAAEF;AAFD,QAAX;;AAIA,UAAMI,MAAM,GAAGtB,aAAa,CAACqB,KAAD,CAA5B;AACAhB,MAAAA,KAAK,CAACkB,OAAN,CAAcT,IAAd,CAAmB;AACjBU,QAAAA,QAAQ,EAAErB,kBADO;AAEjBmB,QAAAA,MAAM,EAAEA;AAFS,OAAnB;AAID;AACF,GA3BD;;AA6BA,sBACE,oBAAC,mBAAD;AAAqB,IAAA,SAAS,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAiB,IAAA,WAAW,EAAE,qBAAAf,KAAK;AAAA,aAAID,eAAe,CAACC,KAAD,CAAnB;AAAA,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAnCD;;AAqCA,eAAeX,UAAU,CAACQ,YAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { FaMapMarkerAlt } from 'react-icons/fa';\r\nimport MapAutoComplete from '@hotel/components/Map/MapAutoComplete';\r\nimport { NavbarSearchWrapper } from './Header.style';\r\nimport { setStateToUrl, getStateFromUrl } from '@iso/lib/helpers/url_handler';\r\nimport { MapDataHelper } from '@hotel/components/Map/MapLocationBox';\r\nimport { LISTING_POSTS_PAGE } from '../../../settings/constant';\r\n\r\nconst NavbarSearch = props => {\r\n  const updatevalueFunc = value => {\r\n    const { searchedPlaceAPIData } = value;\r\n    let tempLocation = [];\r\n    const mapData = !isEmpty(searchedPlaceAPIData)\r\n      ? MapDataHelper(searchedPlaceAPIData)\r\n      : [];\r\n    if (!isEmpty(mapData) && mapData.length !== 0) {\r\n      mapData.forEach(singleMapData =>\r\n        tempLocation.push({\r\n          lat: singleMapData ? singleMapData.lat.toFixed(3) : null,\r\n          lng: singleMapData ? singleMapData.lng.toFixed(3) : null,\r\n        })\r\n      );\r\n    }\r\n    const searchLocation = tempLocation ? tempLocation[0] : {};\r\n    if (!isEmpty(searchLocation)) {\r\n      const state = getStateFromUrl(props.location);\r\n      const query = {\r\n        ...state,\r\n        location: searchLocation,\r\n      };\r\n      const search = setStateToUrl(query);\r\n      props.history.push({\r\n        pathname: LISTING_POSTS_PAGE,\r\n        search: search,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NavbarSearchWrapper className=\"navbar_search\">\r\n      <MapAutoComplete updatevalue={value => updatevalueFunc(value)} />\r\n    </NavbarSearchWrapper>\r\n  );\r\n};\r\n\r\nexport default withRouter(NavbarSearch);\r\n"]},"metadata":{},"sourceType":"module"}